
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002264  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002324  08002324  00012324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002358  08002358  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002358  08002358  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002358  08002358  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002358  08002358  00012358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800235c  0800235c  0001235c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000014  08002374  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08002374  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007433  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df1  00000000  00000000  0002746f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  00029260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  00029b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d108  00000000  00000000  0002a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000781f  00000000  00000000  000373b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00043169  00000000  00000000  0003ebcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00081d38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c68  00000000  00000000  00081d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800230c 	.word	0x0800230c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	0800230c 	.word	0x0800230c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2201      	movs	r2, #1
 800022e:	431a      	orrs	r2, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	601a      	str	r2, [r3, #0]
}
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}

0800023c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	6a1a      	ldr	r2, [r3, #32]
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	431a      	orrs	r2, r3
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	621a      	str	r2, [r3, #32]
}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}

0800025a <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800025a:	b580      	push	{r7, lr}
 800025c:	b082      	sub	sp, #8
 800025e:	af00      	add	r7, sp, #0
 8000260:	6078      	str	r0, [r7, #4]
 8000262:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	683a      	ldr	r2, [r7, #0]
 8000268:	635a      	str	r2, [r3, #52]	; 0x34
}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <LedStart>:
 */
#include "stm32l0xx_ll_tim.h"
#include "Led.h"

//Démarre le timer
void LedStart(TIMER_LED *myled){
 8000272:	b580      	push	{r7, lr}
 8000274:	b082      	sub	sp, #8
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]

	LL_TIM_EnableCounter(myled->timer);////active le counter
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	0018      	movs	r0, r3
 8000280:	f7ff ffce 	bl	8000220 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(myled->timer, myled->channel); //active la sortie pwm
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	689a      	ldr	r2, [r3, #8]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	0019      	movs	r1, r3
 800028e:	0010      	movs	r0, r2
 8000290:	f7ff ffd4 	bl	800023c <LL_TIM_CC_EnableChannel>
}
 8000294:	46c0      	nop			; (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	b002      	add	sp, #8
 800029a:	bd80      	pop	{r7, pc}

0800029c <LedSetValue>:

// Configure le rapport cyclique de la PMW entre 0 et 255
void LedSetValue (TIMER_LED *myled){
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	LL_TIM_OC_SetCompareCH1(myled->timer, myled->lum);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	689a      	ldr	r2, [r3, #8]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	0019      	movs	r1, r3
 80002ae:	0010      	movs	r0, r2
 80002b0:	f7ff ffd3 	bl	800025a <LL_TIM_OC_SetCompareCH1>
}
 80002b4:	46c0      	nop			; (mov r8, r8)
 80002b6:	46bd      	mov	sp, r7
 80002b8:	b002      	add	sp, #8
 80002ba:	bd80      	pop	{r7, pc}

080002bc <LedPulse>:

// A chaque appel, cette fonction incrémente la luminosité de la LED
// Arrivé à la valeur max, chaque apeel décrémente la LED
void LedPulse(TIMER_LED *myled){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	if(myled->inc==0){
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d110      	bne.n	80002ee <LedPulse+0x32>
		myled->lum++;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
		LedSetValue(myled);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	0018      	movs	r0, r3
 80002da:	f7ff ffdf 	bl	800029c <LedSetValue>
		if(myled->lum == 255)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2bff      	cmp	r3, #255	; 0xff
 80002e4:	d113      	bne.n	800030e <LedPulse+0x52>
			myled->inc = 1;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2201      	movs	r2, #1
 80002ea:	605a      	str	r2, [r3, #4]
		myled->lum--;
		LedSetValue(myled);
		if(myled->lum == 0)
			myled->inc = 0;
	}
}
 80002ec:	e00f      	b.n	800030e <LedPulse+0x52>
		myled->lum--;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	1e5a      	subs	r2, r3, #1
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	601a      	str	r2, [r3, #0]
		LedSetValue(myled);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	0018      	movs	r0, r3
 80002fc:	f7ff ffce 	bl	800029c <LedSetValue>
		if(myled->lum == 0)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d102      	bne.n	800030e <LedPulse+0x52>
			myled->inc = 0;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	b002      	add	sp, #8
 8000314:	bd80      	pop	{r7, pc}

08000316 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000316:	b580      	push	{r7, lr}
 8000318:	b082      	sub	sp, #8
 800031a:	af00      	add	r7, sp, #0
 800031c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	69db      	ldr	r3, [r3, #28]
 8000322:	2220      	movs	r2, #32
 8000324:	4013      	ands	r3, r2
 8000326:	2b20      	cmp	r3, #32
 8000328:	d101      	bne.n	800032e <LL_USART_IsActiveFlag_RXNE+0x18>
 800032a:	2301      	movs	r3, #1
 800032c:	e000      	b.n	8000330 <LL_USART_IsActiveFlag_RXNE+0x1a>
 800032e:	2300      	movs	r3, #0
}
 8000330:	0018      	movs	r0, r3
 8000332:	46bd      	mov	sp, r7
 8000334:	b002      	add	sp, #8
 8000336:	bd80      	pop	{r7, pc}

08000338 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	69db      	ldr	r3, [r3, #28]
 8000344:	2280      	movs	r2, #128	; 0x80
 8000346:	4013      	ands	r3, r2
 8000348:	2b80      	cmp	r3, #128	; 0x80
 800034a:	d101      	bne.n	8000350 <LL_USART_IsActiveFlag_TXE+0x18>
 800034c:	2301      	movs	r3, #1
 800034e:	e000      	b.n	8000352 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000350:	2300      	movs	r3, #0
}
 8000352:	0018      	movs	r0, r3
 8000354:	46bd      	mov	sp, r7
 8000356:	b002      	add	sp, #8
 8000358:	bd80      	pop	{r7, pc}

0800035a <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	b082      	sub	sp, #8
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000366:	b2db      	uxtb	r3, r3
}
 8000368:	0018      	movs	r0, r3
 800036a:	46bd      	mov	sp, r7
 800036c:	b002      	add	sp, #8
 800036e:	bd80      	pop	{r7, pc}

08000370 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	000a      	movs	r2, r1
 800037a:	1cfb      	adds	r3, r7, #3
 800037c:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 800037e:	1cfb      	adds	r3, r7, #3
 8000380:	781a      	ldrb	r2, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b002      	add	sp, #8
 800038c:	bd80      	pop	{r7, pc}

0800038e <SerialTransmit>:
 *      Author: eleve
 */
#include "stm32l0xx_ll_usart.h"

// Cette fonction pourra être utilisée par le Shell v0.4
uint8_t SerialTransmit(char * pData, uint16_t Size,USART_TypeDef* USARTx){
 800038e:	b580      	push	{r7, lr}
 8000390:	b086      	sub	sp, #24
 8000392:	af00      	add	r7, sp, #0
 8000394:	60f8      	str	r0, [r7, #12]
 8000396:	607a      	str	r2, [r7, #4]
 8000398:	230a      	movs	r3, #10
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	1c0a      	adds	r2, r1, #0
 800039e:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<Size;i++)
 80003a0:	2300      	movs	r3, #0
 80003a2:	617b      	str	r3, [r7, #20]
 80003a4:	e012      	b.n	80003cc <SerialTransmit+0x3e>
	{
		while(LL_USART_IsActiveFlag_TXE(USARTx)==0){}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	0018      	movs	r0, r3
 80003ac:	f7ff ffc4 	bl	8000338 <LL_USART_IsActiveFlag_TXE>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d0f9      	beq.n	80003a8 <SerialTransmit+0x1a>
		LL_USART_TransmitData8(USARTx, pData[i]);
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	68fa      	ldr	r2, [r7, #12]
 80003b8:	18d3      	adds	r3, r2, r3
 80003ba:	781a      	ldrb	r2, [r3, #0]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	0011      	movs	r1, r2
 80003c0:	0018      	movs	r0, r3
 80003c2:	f7ff ffd5 	bl	8000370 <LL_USART_TransmitData8>
	for(int i=0;i<Size;i++)
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	3301      	adds	r3, #1
 80003ca:	617b      	str	r3, [r7, #20]
 80003cc:	230a      	movs	r3, #10
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	697a      	ldr	r2, [r7, #20]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	dbe6      	blt.n	80003a6 <SerialTransmit+0x18>
	}
	return 0;
 80003d8:	2300      	movs	r3, #0
}
 80003da:	0018      	movs	r0, r3
 80003dc:	46bd      	mov	sp, r7
 80003de:	b006      	add	sp, #24
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <SerialReceiveChar>:
// Dans cet exemple, on fait du polling, et c'est pas très grave
char SerialReceiveChar(USART_TypeDef* USARTx){
 80003e2:	b5b0      	push	{r4, r5, r7, lr}
 80003e4:	b084      	sub	sp, #16
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
	while(LL_USART_IsActiveFlag_RXNE(USARTx)==0);
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	0018      	movs	r0, r3
 80003f0:	f7ff ff91 	bl	8000316 <LL_USART_IsActiveFlag_RXNE>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d0f9      	beq.n	80003ec <SerialReceiveChar+0xa>
	char ch = (char)LL_USART_ReceiveData8(USARTx);
 80003f8:	250f      	movs	r5, #15
 80003fa:	197c      	adds	r4, r7, r5
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	0018      	movs	r0, r3
 8000400:	f7ff ffab 	bl	800035a <LL_USART_ReceiveData8>
 8000404:	0003      	movs	r3, r0
 8000406:	7023      	strb	r3, [r4, #0]
	return ch;
 8000408:	197b      	adds	r3, r7, r5
 800040a:	781b      	ldrb	r3, [r3, #0]
}
 800040c:	0018      	movs	r0, r3
 800040e:	46bd      	mov	sp, r7
 8000410:	b004      	add	sp, #16
 8000412:	bdb0      	pop	{r4, r5, r7, pc}

08000414 <LL_TIM_EnableCounter>:
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2201      	movs	r2, #1
 8000422:	431a      	orrs	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	601a      	str	r2, [r3, #0]
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b002      	add	sp, #8
 800042e:	bd80      	pop	{r7, pc}

08000430 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	2201      	movs	r2, #1
 800043e:	431a      	orrs	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	60da      	str	r2, [r3, #12]
}
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	b002      	add	sp, #8
 800044a:	bd80      	pop	{r7, pc}

0800044c <TimeBaseStartIT>:
 *  Created on: Mar 8, 2023
 *      Author: eleve
 */
#include "stm32l0xx_ll_tim.h"

void TimeBaseStartIT(void){
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
		LL_TIM_EnableCounter(TIM21);// activer counter
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <TimeBaseStartIT+0x1c>)
 8000452:	0018      	movs	r0, r3
 8000454:	f7ff ffde 	bl	8000414 <LL_TIM_EnableCounter>
		LL_TIM_EnableIT_UPDATE(TIM21);// activer interruption
 8000458:	4b03      	ldr	r3, [pc, #12]	; (8000468 <TimeBaseStartIT+0x1c>)
 800045a:	0018      	movs	r0, r3
 800045c:	f7ff ffe8 	bl	8000430 <LL_TIM_EnableIT_UPDATE>
}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	40010800 	.word	0x40010800

0800046c <LL_ADC_SetCommonFrequencyMode>:
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a05      	ldr	r2, [pc, #20]	; (8000490 <LL_ADC_SetCommonFrequencyMode+0x24>)
 800047c:	401a      	ands	r2, r3
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	431a      	orrs	r2, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	b002      	add	sp, #8
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	fdffffff 	.word	0xfdffffff

08000494 <LL_ADC_SetSamplingTimeCommonChannels>:
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	2207      	movs	r2, #7
 80004a4:	4393      	bics	r3, r2
 80004a6:	001a      	movs	r2, r3
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	431a      	orrs	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	615a      	str	r2, [r3, #20]
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b002      	add	sp, #8
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <LL_ADC_REG_SetSequencerScanDirection>:
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	2204      	movs	r2, #4
 80004c8:	4393      	bics	r3, r2
 80004ca:	001a      	movs	r2, r3
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	431a      	orrs	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b002      	add	sp, #8
 80004da:	bd80      	pop	{r7, pc}

080004dc <LL_ADC_REG_SetSequencerChAdd>:
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	035b      	lsls	r3, r3, #13
 80004ee:	0b5b      	lsrs	r3, r3, #13
 80004f0:	431a      	orrs	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	629a      	str	r2, [r3, #40]	; 0x28
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}

080004fe <LL_ADC_SetOverSamplingScope>:
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	6039      	str	r1, [r7, #0]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	691b      	ldr	r3, [r3, #16]
 800050c:	2201      	movs	r2, #1
 800050e:	4393      	bics	r3, r2
 8000510:	001a      	movs	r2, r3
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	431a      	orrs	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	611a      	str	r2, [r3, #16]
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b002      	add	sp, #8
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <LL_ADC_EnableInternalRegulator>:
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	4a05      	ldr	r2, [pc, #20]	; (8000548 <LL_ADC_EnableInternalRegulator+0x24>)
 8000532:	4013      	ands	r3, r2
 8000534:	2280      	movs	r2, #128	; 0x80
 8000536:	0552      	lsls	r2, r2, #21
 8000538:	431a      	orrs	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b002      	add	sp, #8
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	6fffffe8 	.word	0x6fffffe8

0800054c <LL_ADC_DisableIT_EOC>:
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	2204      	movs	r2, #4
 800055a:	4393      	bics	r3, r2
 800055c:	001a      	movs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b002      	add	sp, #8
 8000568:	bd80      	pop	{r7, pc}

0800056a <LL_ADC_DisableIT_EOS>:
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	2208      	movs	r2, #8
 8000578:	4393      	bics	r3, r2
 800057a:	001a      	movs	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b002      	add	sp, #8
 8000586:	bd80      	pop	{r7, pc}

08000588 <LL_APB2_GRP1_EnableClock>:
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <LL_APB2_GRP1_EnableClock+0x28>)
 8000592:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <LL_APB2_GRP1_EnableClock+0x28>)
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	430a      	orrs	r2, r1
 800059a:	635a      	str	r2, [r3, #52]	; 0x34
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <LL_APB2_GRP1_EnableClock+0x28>)
 800059e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4013      	ands	r3, r2
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b004      	add	sp, #16
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000

080005b4 <LL_IOP_GRP1_EnableClock>:
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <LL_IOP_GRP1_EnableClock+0x28>)
 80005be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <LL_IOP_GRP1_EnableClock+0x28>)
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	430a      	orrs	r2, r1
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <LL_IOP_GRP1_EnableClock+0x28>)
 80005ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	4013      	ands	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b004      	add	sp, #16
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000

080005e0 <MX_ADC_Init>:
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b090      	sub	sp, #64	; 0x40
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	2428      	movs	r4, #40	; 0x28
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	0018      	movs	r0, r3
 80005ec:	2314      	movs	r3, #20
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f001 fe83 	bl	80022fc <memset>
 80005f6:	2518      	movs	r5, #24
 80005f8:	197b      	adds	r3, r7, r5
 80005fa:	0018      	movs	r0, r3
 80005fc:	2310      	movs	r3, #16
 80005fe:	001a      	movs	r2, r3
 8000600:	2100      	movs	r1, #0
 8000602:	f001 fe7b 	bl	80022fc <memset>
 8000606:	003b      	movs	r3, r7
 8000608:	0018      	movs	r0, r3
 800060a:	2318      	movs	r3, #24
 800060c:	001a      	movs	r2, r3
 800060e:	2100      	movs	r1, #0
 8000610:	f001 fe74 	bl	80022fc <memset>
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	0018      	movs	r0, r3
 800061a:	f7ff ffb5 	bl	8000588 <LL_APB2_GRP1_EnableClock>
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff ffc8 	bl	80005b4 <LL_IOP_GRP1_EnableClock>
 8000624:	003b      	movs	r3, r7
 8000626:	2202      	movs	r2, #2
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	003b      	movs	r3, r7
 800062c:	2203      	movs	r2, #3
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	003b      	movs	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
 8000636:	003a      	movs	r2, r7
 8000638:	23a0      	movs	r3, #160	; 0xa0
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	0011      	movs	r1, r2
 800063e:	0018      	movs	r0, r3
 8000640:	f001 f8a3 	bl	800178a <LL_GPIO_Init>
 8000644:	4a36      	ldr	r2, [pc, #216]	; (8000720 <MX_ADC_Init+0x140>)
 8000646:	4b37      	ldr	r3, [pc, #220]	; (8000724 <MX_ADC_Init+0x144>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff ff46 	bl	80004dc <LL_ADC_REG_SetSequencerChAdd>
 8000650:	0021      	movs	r1, r4
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
 8000670:	187b      	adds	r3, r7, r1
 8000672:	4a2c      	ldr	r2, [pc, #176]	; (8000724 <MX_ADC_Init+0x144>)
 8000674:	0019      	movs	r1, r3
 8000676:	0010      	movs	r0, r2
 8000678:	f000 ff9c 	bl	80015b4 <LL_ADC_REG_Init>
 800067c:	4b29      	ldr	r3, [pc, #164]	; (8000724 <MX_ADC_Init+0x144>)
 800067e:	2100      	movs	r1, #0
 8000680:	0018      	movs	r0, r3
 8000682:	f7ff ff07 	bl	8000494 <LL_ADC_SetSamplingTimeCommonChannels>
 8000686:	4b27      	ldr	r3, [pc, #156]	; (8000724 <MX_ADC_Init+0x144>)
 8000688:	2100      	movs	r1, #0
 800068a:	0018      	movs	r0, r3
 800068c:	f7ff ff37 	bl	80004fe <LL_ADC_SetOverSamplingScope>
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <MX_ADC_Init+0x144>)
 8000692:	2100      	movs	r1, #0
 8000694:	0018      	movs	r0, r3
 8000696:	f7ff ff0f 	bl	80004b8 <LL_ADC_REG_SetSequencerScanDirection>
 800069a:	4b23      	ldr	r3, [pc, #140]	; (8000728 <MX_ADC_Init+0x148>)
 800069c:	2100      	movs	r1, #0
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff fee4 	bl	800046c <LL_ADC_SetCommonFrequencyMode>
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <MX_ADC_Init+0x144>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f7ff ff50 	bl	800054c <LL_ADC_DisableIT_EOC>
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_ADC_Init+0x144>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff ff5b 	bl	800056a <LL_ADC_DisableIT_EOS>
 80006b4:	197b      	adds	r3, r7, r5
 80006b6:	2280      	movs	r2, #128	; 0x80
 80006b8:	05d2      	lsls	r2, r2, #23
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	197b      	adds	r3, r7, r5
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	197b      	adds	r3, r7, r5
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	197b      	adds	r3, r7, r5
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	197b      	adds	r3, r7, r5
 80006d0:	4a14      	ldr	r2, [pc, #80]	; (8000724 <MX_ADC_Init+0x144>)
 80006d2:	0019      	movs	r1, r3
 80006d4:	0010      	movs	r0, r2
 80006d6:	f000 ff37 	bl	8001548 <LL_ADC_Init>
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_ADC_Init+0x144>)
 80006dc:	0018      	movs	r0, r3
 80006de:	f7ff ff21 	bl	8000524 <LL_ADC_EnableInternalRegulator>
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_ADC_Init+0x14c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4912      	ldr	r1, [pc, #72]	; (8000730 <MX_ADC_Init+0x150>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f7ff fd0d 	bl	8000108 <__udivsi3>
 80006ee:	0003      	movs	r3, r0
 80006f0:	001a      	movs	r2, r3
 80006f2:	0013      	movs	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	189b      	adds	r3, r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	210a      	movs	r1, #10
 80006fc:	0018      	movs	r0, r3
 80006fe:	f7ff fd03 	bl	8000108 <__udivsi3>
 8000702:	0003      	movs	r3, r0
 8000704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000706:	e002      	b.n	800070e <MX_ADC_Init+0x12e>
 8000708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800070a:	3b01      	subs	r3, #1
 800070c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800070e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f9      	bne.n	8000708 <MX_ADC_Init+0x128>
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b010      	add	sp, #64	; 0x40
 800071c:	bdb0      	pop	{r4, r5, r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	04000002 	.word	0x04000002
 8000724:	40012400 	.word	0x40012400
 8000728:	40012708 	.word	0x40012708
 800072c:	20000010 	.word	0x20000010
 8000730:	00030d40 	.word	0x00030d40

08000734 <LL_IOP_GRP1_EnableClock>:
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <LL_IOP_GRP1_EnableClock+0x28>)
 800073e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <LL_IOP_GRP1_EnableClock+0x28>)
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	430a      	orrs	r2, r1
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <LL_IOP_GRP1_EnableClock+0x28>)
 800074a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	4013      	ands	r3, r2
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b004      	add	sp, #16
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40021000 	.word	0x40021000

08000760 <LL_GPIO_ResetOutputPin>:
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b002      	add	sp, #8
 8000776:	bd80      	pop	{r7, pc}

08000778 <MX_GPIO_Init>:
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	003b      	movs	r3, r7
 8000780:	0018      	movs	r0, r3
 8000782:	2318      	movs	r3, #24
 8000784:	001a      	movs	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	f001 fdb8 	bl	80022fc <memset>
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff ffd1 	bl	8000734 <LL_IOP_GRP1_EnableClock>
 8000792:	23a0      	movs	r3, #160	; 0xa0
 8000794:	05db      	lsls	r3, r3, #23
 8000796:	2108      	movs	r1, #8
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff ffe1 	bl	8000760 <LL_GPIO_ResetOutputPin>
 800079e:	23a0      	movs	r3, #160	; 0xa0
 80007a0:	05db      	lsls	r3, r3, #23
 80007a2:	2110      	movs	r1, #16
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff ffdb 	bl	8000760 <LL_GPIO_ResetOutputPin>
 80007aa:	003b      	movs	r3, r7
 80007ac:	2208      	movs	r2, #8
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	003b      	movs	r3, r7
 80007b2:	2201      	movs	r2, #1
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	003b      	movs	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	003b      	movs	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	003a      	movs	r2, r7
 80007ca:	23a0      	movs	r3, #160	; 0xa0
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	0011      	movs	r1, r2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 ffda 	bl	800178a <LL_GPIO_Init>
 80007d6:	003b      	movs	r3, r7
 80007d8:	2210      	movs	r2, #16
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	003b      	movs	r3, r7
 80007de:	2201      	movs	r2, #1
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	003b      	movs	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	003b      	movs	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	003b      	movs	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
 80007f4:	003a      	movs	r2, r7
 80007f6:	23a0      	movs	r3, #160	; 0xa0
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	0011      	movs	r1, r2
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 ffc4 	bl	800178a <LL_GPIO_Init>
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b006      	add	sp, #24
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	0002      	movs	r2, r0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b7f      	cmp	r3, #127	; 0x7f
 8000820:	d828      	bhi.n	8000874 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000822:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <__NVIC_SetPriority+0xd4>)
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b25b      	sxtb	r3, r3
 800082a:	089b      	lsrs	r3, r3, #2
 800082c:	33c0      	adds	r3, #192	; 0xc0
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	589b      	ldr	r3, [r3, r2]
 8000832:	1dfa      	adds	r2, r7, #7
 8000834:	7812      	ldrb	r2, [r2, #0]
 8000836:	0011      	movs	r1, r2
 8000838:	2203      	movs	r2, #3
 800083a:	400a      	ands	r2, r1
 800083c:	00d2      	lsls	r2, r2, #3
 800083e:	21ff      	movs	r1, #255	; 0xff
 8000840:	4091      	lsls	r1, r2
 8000842:	000a      	movs	r2, r1
 8000844:	43d2      	mvns	r2, r2
 8000846:	401a      	ands	r2, r3
 8000848:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	019b      	lsls	r3, r3, #6
 800084e:	22ff      	movs	r2, #255	; 0xff
 8000850:	401a      	ands	r2, r3
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	0018      	movs	r0, r3
 8000858:	2303      	movs	r3, #3
 800085a:	4003      	ands	r3, r0
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000860:	481f      	ldr	r0, [pc, #124]	; (80008e0 <__NVIC_SetPriority+0xd4>)
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b25b      	sxtb	r3, r3
 8000868:	089b      	lsrs	r3, r3, #2
 800086a:	430a      	orrs	r2, r1
 800086c:	33c0      	adds	r3, #192	; 0xc0
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000872:	e031      	b.n	80008d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <__NVIC_SetPriority+0xd8>)
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	0019      	movs	r1, r3
 800087c:	230f      	movs	r3, #15
 800087e:	400b      	ands	r3, r1
 8000880:	3b08      	subs	r3, #8
 8000882:	089b      	lsrs	r3, r3, #2
 8000884:	3306      	adds	r3, #6
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	18d3      	adds	r3, r2, r3
 800088a:	3304      	adds	r3, #4
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	1dfa      	adds	r2, r7, #7
 8000890:	7812      	ldrb	r2, [r2, #0]
 8000892:	0011      	movs	r1, r2
 8000894:	2203      	movs	r2, #3
 8000896:	400a      	ands	r2, r1
 8000898:	00d2      	lsls	r2, r2, #3
 800089a:	21ff      	movs	r1, #255	; 0xff
 800089c:	4091      	lsls	r1, r2
 800089e:	000a      	movs	r2, r1
 80008a0:	43d2      	mvns	r2, r2
 80008a2:	401a      	ands	r2, r3
 80008a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	019b      	lsls	r3, r3, #6
 80008aa:	22ff      	movs	r2, #255	; 0xff
 80008ac:	401a      	ands	r2, r3
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	0018      	movs	r0, r3
 80008b4:	2303      	movs	r3, #3
 80008b6:	4003      	ands	r3, r0
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <__NVIC_SetPriority+0xd8>)
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	001c      	movs	r4, r3
 80008c4:	230f      	movs	r3, #15
 80008c6:	4023      	ands	r3, r4
 80008c8:	3b08      	subs	r3, #8
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	430a      	orrs	r2, r1
 80008ce:	3306      	adds	r3, #6
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	18c3      	adds	r3, r0, r3
 80008d4:	3304      	adds	r3, #4
 80008d6:	601a      	str	r2, [r3, #0]
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	b003      	add	sp, #12
 80008de:	bd90      	pop	{r4, r7, pc}
 80008e0:	e000e100 	.word	0xe000e100
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <LL_RCC_HSI_Enable+0x18>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <LL_RCC_HSI_Enable+0x18>)
 80008f2:	2101      	movs	r1, #1
 80008f4:	430a      	orrs	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	40021000 	.word	0x40021000

08000904 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <LL_RCC_HSI_IsReady+0x1c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2204      	movs	r2, #4
 800090e:	4013      	ands	r3, r2
 8000910:	2b04      	cmp	r3, #4
 8000912:	d101      	bne.n	8000918 <LL_RCC_HSI_IsReady+0x14>
 8000914:	2301      	movs	r3, #1
 8000916:	e000      	b.n	800091a <LL_RCC_HSI_IsReady+0x16>
 8000918:	2300      	movs	r3, #0
}
 800091a:	0018      	movs	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000

08000924 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	4a06      	ldr	r2, [pc, #24]	; (800094c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000932:	4013      	ands	r3, r2
 8000934:	0019      	movs	r1, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	021a      	lsls	r2, r3, #8
 800093a:	4b03      	ldr	r3, [pc, #12]	; (8000948 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800093c:	430a      	orrs	r2, r1
 800093e:	605a      	str	r2, [r3, #4]
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b002      	add	sp, #8
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40021000 	.word	0x40021000
 800094c:	ffffe0ff 	.word	0xffffe0ff

08000950 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <LL_RCC_SetSysClkSource+0x24>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	2203      	movs	r2, #3
 800095e:	4393      	bics	r3, r2
 8000960:	0019      	movs	r1, r3
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <LL_RCC_SetSysClkSource+0x24>)
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	430a      	orrs	r2, r1
 8000968:	60da      	str	r2, [r3, #12]
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	40021000 	.word	0x40021000

08000978 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <LL_RCC_GetSysClkSource+0x14>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	220c      	movs	r2, #12
 8000982:	4013      	ands	r3, r2
}
 8000984:	0018      	movs	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	40021000 	.word	0x40021000

08000990 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <LL_RCC_SetAHBPrescaler+0x24>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	22f0      	movs	r2, #240	; 0xf0
 800099e:	4393      	bics	r3, r2
 80009a0:	0019      	movs	r1, r3
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <LL_RCC_SetAHBPrescaler+0x24>)
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	430a      	orrs	r2, r1
 80009a8:	60da      	str	r2, [r3, #12]
}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b002      	add	sp, #8
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	40021000 	.word	0x40021000

080009b8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <LL_RCC_SetAPB1Prescaler+0x28>)
 80009c6:	4013      	ands	r3, r2
 80009c8:	0019      	movs	r1, r3
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	430a      	orrs	r2, r1
 80009d0:	60da      	str	r2, [r3, #12]
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40021000 	.word	0x40021000
 80009e0:	fffff8ff 	.word	0xfffff8ff

080009e4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <LL_RCC_SetAPB2Prescaler+0x24>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <LL_RCC_SetAPB2Prescaler+0x28>)
 80009f2:	4013      	ands	r3, r2
 80009f4:	0019      	movs	r1, r3
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <LL_RCC_SetAPB2Prescaler+0x24>)
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	430a      	orrs	r2, r1
 80009fc:	60da      	str	r2, [r3, #12]
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	ffffc7ff 	.word	0xffffc7ff

08000a10 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <LL_RCC_SetUSARTClockSource+0x2c>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	0c12      	lsrs	r2, r2, #16
 8000a20:	43d2      	mvns	r2, r2
 8000a22:	401a      	ands	r2, r3
 8000a24:	0011      	movs	r1, r2
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	041b      	lsls	r3, r3, #16
 8000a2a:	0c1a      	lsrs	r2, r3, #16
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <LL_RCC_SetUSARTClockSource+0x2c>)
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b002      	add	sp, #8
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	40021000 	.word	0x40021000

08000a40 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <LL_RCC_PLL_Enable+0x18>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <LL_RCC_PLL_Enable+0x18>)
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	0449      	lsls	r1, r1, #17
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40021000 	.word	0x40021000

08000a5c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <LL_RCC_PLL_IsReady+0x24>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	049b      	lsls	r3, r3, #18
 8000a68:	401a      	ands	r2, r3
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	049b      	lsls	r3, r3, #18
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d101      	bne.n	8000a76 <LL_RCC_PLL_IsReady+0x1a>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <LL_RCC_PLL_IsReady+0x1c>
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	40021000 	.word	0x40021000

08000a84 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <LL_RCC_PLL_ConfigDomain_SYS+0x34>)
 8000a96:	4013      	ands	r3, r2
 8000a98:	0019      	movs	r1, r3
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	431a      	orrs	r2, r3
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	60da      	str	r2, [r3, #12]
}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b004      	add	sp, #16
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	ff02ffff 	.word	0xff02ffff

08000abc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ac6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	430a      	orrs	r2, r1
 8000ace:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ada:	68fb      	ldr	r3, [r7, #12]
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b004      	add	sp, #16
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <LL_APB2_GRP1_EnableClock+0x28>)
 8000af2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <LL_APB2_GRP1_EnableClock+0x28>)
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <LL_APB2_GRP1_EnableClock+0x28>)
 8000afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	4013      	ands	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b004      	add	sp, #16
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40021000 	.word	0x40021000

08000b14 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <LL_FLASH_SetLatency+0x24>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2201      	movs	r2, #1
 8000b22:	4393      	bics	r3, r2
 8000b24:	0019      	movs	r1, r3
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <LL_FLASH_SetLatency+0x24>)
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	601a      	str	r2, [r3, #0]
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40022000 	.word	0x40022000

08000b3c <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <LL_FLASH_GetLatency+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2201      	movs	r2, #1
 8000b46:	4013      	ands	r3, r2
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	40022000 	.word	0x40022000

08000b54 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <LL_PWR_SetRegulVoltageScaling+0x28>)
 8000b62:	4013      	ands	r3, r2
 8000b64:	0019      	movs	r1, r3
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	601a      	str	r2, [r3, #0]
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	40007000 	.word	0x40007000
 8000b7c:	ffffe7ff 	.word	0xffffe7ff

08000b80 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff ffae 	bl	8000ae8 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	055b      	lsls	r3, r3, #21
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff ff93 	bl	8000abc <LL_APB1_GRP1_EnableClock>

	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn, 3);
 8000b96:	2301      	movs	r3, #1
 8000b98:	425b      	negs	r3, r3
 8000b9a:	2103      	movs	r1, #3
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f7ff fe35 	bl	800080c <__NVIC_SetPriority>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ba2:	f000 f829 	bl	8000bf8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ba6:	f7ff fde7 	bl	8000778 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000baa:	f000 fc03 	bl	80013b4 <MX_USART2_UART_Init>
	MX_ADC_Init();
 8000bae:	f7ff fd17 	bl	80005e0 <MX_ADC_Init>
	MX_SPI1_Init();
 8000bb2:	f000 f8af 	bl	8000d14 <MX_SPI1_Init>
	MX_TIM2_Init();
 8000bb6:	f000 fae4 	bl	8001182 <MX_TIM2_Init>
	MX_TIM21_Init();
 8000bba:	f000 fb69 	bl	8001290 <MX_TIM21_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	LedStart(&TIM2_LED);
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <main+0x70>)
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff fb56 	bl	8000272 <LedStart>
	TimeBaseStartIT(); // active interruption
 8000bc6:	f7ff fc41 	bl	800044c <TimeBaseStartIT>
	char ch = 'a';
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	2261      	movs	r2, #97	; 0x61
 8000bce:	701a      	strb	r2, [r3, #0]
		//LL_mDelay(1);

		//Timer + interruption

		//UART Simple Echo
		ch = SerialReceiveChar(USART2);
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <main+0x74>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff fc05 	bl	80003e2 <SerialReceiveChar>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	001a      	movs	r2, r3
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	701a      	strb	r2, [r3, #0]

		SerialTransmit(&ch, 1,USART2);
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <main+0x74>)
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	2101      	movs	r1, #1
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff fbd1 	bl	800038e <SerialTransmit>
		ch = SerialReceiveChar(USART2);
 8000bec:	e7f0      	b.n	8000bd0 <main+0x50>
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff ff89 	bl	8000b14 <LL_FLASH_SetLatency>
	while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	f7ff ff9a 	bl	8000b3c <LL_FLASH_GetLatency>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d1fa      	bne.n	8000c04 <SystemClock_Config+0xc>
	{
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	011b      	lsls	r3, r3, #4
 8000c12:	0018      	movs	r0, r3
 8000c14:	f7ff ff9e 	bl	8000b54 <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_HSI_Enable();
 8000c18:	f7ff fe66 	bl	80008e8 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while(LL_RCC_HSI_IsReady() != 1)
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	f7ff fe71 	bl	8000904 <LL_RCC_HSI_IsReady>
 8000c22:	0003      	movs	r3, r0
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d1fa      	bne.n	8000c1e <SystemClock_Config+0x26>
	{

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8000c28:	2010      	movs	r0, #16
 8000c2a:	f7ff fe7b 	bl	8000924 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_4, LL_RCC_PLL_DIV_2);
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	03da      	lsls	r2, r3, #15
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	02db      	lsls	r3, r3, #11
 8000c36:	0019      	movs	r1, r3
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff ff23 	bl	8000a84 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8000c3e:	f7ff feff 	bl	8000a40 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1)
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	f7ff ff0a 	bl	8000a5c <LL_RCC_PLL_IsReady>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d1fa      	bne.n	8000c44 <SystemClock_Config+0x4c>
	{

	}
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fe9e 	bl	8000990 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff feaf 	bl	80009b8 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff fec2 	bl	80009e4 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f7ff fe75 	bl	8000950 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	f7ff fe86 	bl	8000978 <LL_RCC_GetSysClkSource>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	2b0c      	cmp	r3, #12
 8000c70:	d1fa      	bne.n	8000c68 <SystemClock_Config+0x70>
	{

	}

	LL_Init1msTick(32000000);
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <SystemClock_Config+0x9c>)
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 faff 	bl	8002278 <LL_Init1msTick>

	LL_SetSystemCoreClock(32000000);
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemClock_Config+0x9c>)
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f001 fb0b 	bl	8002298 <LL_SetSystemCoreClock>
	LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000c82:	23c0      	movs	r3, #192	; 0xc0
 8000c84:	031b      	lsls	r3, r3, #12
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff fec2 	bl	8000a10 <LL_RCC_SetUSARTClockSource>
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	01e84800 	.word	0x01e84800

08000c98 <LL_APB2_GRP1_EnableClock>:
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <LL_APB2_GRP1_EnableClock+0x28>)
 8000ca2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <LL_APB2_GRP1_EnableClock+0x28>)
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <LL_APB2_GRP1_EnableClock+0x28>)
 8000cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b004      	add	sp, #16
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <LL_IOP_GRP1_EnableClock+0x28>)
 8000cce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <LL_IOP_GRP1_EnableClock+0x28>)
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <LL_IOP_GRP1_EnableClock+0x28>)
 8000cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b004      	add	sp, #16
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40021000 	.word	0x40021000

08000cf0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2210      	movs	r2, #16
 8000d00:	4393      	bics	r3, r2
 8000d02:	001a      	movs	r2, r3
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	431a      	orrs	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	605a      	str	r2, [r3, #4]
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b002      	add	sp, #8
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b091      	sub	sp, #68	; 0x44
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000d1a:	2418      	movs	r4, #24
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	0018      	movs	r0, r3
 8000d20:	2328      	movs	r3, #40	; 0x28
 8000d22:	001a      	movs	r2, r3
 8000d24:	2100      	movs	r1, #0
 8000d26:	f001 fae9 	bl	80022fc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	003b      	movs	r3, r7
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	2318      	movs	r3, #24
 8000d30:	001a      	movs	r2, r3
 8000d32:	2100      	movs	r1, #0
 8000d34:	f001 fae2 	bl	80022fc <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	015b      	lsls	r3, r3, #5
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff ffab 	bl	8000c98 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff ffbe 	bl	8000cc4 <LL_IOP_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000d48:	003b      	movs	r3, r7
 8000d4a:	2220      	movs	r2, #32
 8000d4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d4e:	003b      	movs	r3, r7
 8000d50:	2202      	movs	r2, #2
 8000d52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	003b      	movs	r3, r7
 8000d56:	2203      	movs	r2, #3
 8000d58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d5a:	003b      	movs	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d60:	003b      	movs	r3, r7
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000d66:	003b      	movs	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	003a      	movs	r2, r7
 8000d6e:	23a0      	movs	r3, #160	; 0xa0
 8000d70:	05db      	lsls	r3, r3, #23
 8000d72:	0011      	movs	r1, r2
 8000d74:	0018      	movs	r0, r3
 8000d76:	f000 fd08 	bl	800178a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000d7a:	003b      	movs	r3, r7
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d80:	003b      	movs	r3, r7
 8000d82:	2202      	movs	r2, #2
 8000d84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	003b      	movs	r3, r7
 8000d88:	2203      	movs	r2, #3
 8000d8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d8c:	003b      	movs	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d92:	003b      	movs	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000d98:	003b      	movs	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	003a      	movs	r2, r7
 8000da0:	23a0      	movs	r3, #160	; 0xa0
 8000da2:	05db      	lsls	r3, r3, #23
 8000da4:	0011      	movs	r1, r2
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 fcef 	bl	800178a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	2282      	movs	r2, #130	; 0x82
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	605a      	str	r2, [r3, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000dba:	0021      	movs	r1, r4
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	0092      	lsls	r2, r2, #2
 8000dd4:	615a      	str	r2, [r3, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  SPI_InitStruct.CRCPoly = 7;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2207      	movs	r2, #7
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <MX_SPI1_Init+0xf8>)
 8000df2:	0019      	movs	r1, r3
 8000df4:	0010      	movs	r0, r2
 8000df6:	f000 fedf 	bl	8001bb8 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <MX_SPI1_Init+0xf8>)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff ff76 	bl	8000cf0 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b011      	add	sp, #68	; 0x44
 8000e0a:	bd90      	pop	{r4, r7, pc}
 8000e0c:	40013000 	.word	0x40013000

08000e10 <LL_TIM_ClearFlag_UPDATE>:
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	4252      	negs	r2, r2
 8000e1e:	611a      	str	r2, [r3, #16]
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b002      	add	sp, #8
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM21);
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <TIM21_IRQHandler+0x1c>)
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff ffd8 	bl	8000e10 <LL_TIM_ClearFlag_UPDATE>
	LedPulse(&TIM2_LED);
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <TIM21_IRQHandler+0x20>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff fa2a 	bl	80002bc <LedPulse>
  /* USER CODE END TIM21_IRQn 0 */
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	40010800 	.word	0x40010800
 8000e74:	20000000 	.word	0x20000000

08000e78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <__NVIC_EnableIRQ>:
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	1dfb      	adds	r3, r7, #7
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b7f      	cmp	r3, #127	; 0x7f
 8000e96:	d809      	bhi.n	8000eac <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	231f      	movs	r3, #31
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_EnableIRQ+0x30>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4091      	lsls	r1, r2
 8000ea8:	000a      	movs	r2, r1
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b7f      	cmp	r3, #127	; 0x7f
 8000ecc:	d828      	bhi.n	8000f20 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ece:	4a2f      	ldr	r2, [pc, #188]	; (8000f8c <__NVIC_SetPriority+0xd4>)
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	33c0      	adds	r3, #192	; 0xc0
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	589b      	ldr	r3, [r3, r2]
 8000ede:	1dfa      	adds	r2, r7, #7
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	400a      	ands	r2, r1
 8000ee8:	00d2      	lsls	r2, r2, #3
 8000eea:	21ff      	movs	r1, #255	; 0xff
 8000eec:	4091      	lsls	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	43d2      	mvns	r2, r2
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	019b      	lsls	r3, r3, #6
 8000efa:	22ff      	movs	r2, #255	; 0xff
 8000efc:	401a      	ands	r2, r3
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	0018      	movs	r0, r3
 8000f04:	2303      	movs	r3, #3
 8000f06:	4003      	ands	r3, r0
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f0c:	481f      	ldr	r0, [pc, #124]	; (8000f8c <__NVIC_SetPriority+0xd4>)
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	430a      	orrs	r2, r1
 8000f18:	33c0      	adds	r3, #192	; 0xc0
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	501a      	str	r2, [r3, r0]
}
 8000f1e:	e031      	b.n	8000f84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f20:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <__NVIC_SetPriority+0xd8>)
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	0019      	movs	r1, r3
 8000f28:	230f      	movs	r3, #15
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	3b08      	subs	r3, #8
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3306      	adds	r3, #6
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	18d3      	adds	r3, r2, r3
 8000f36:	3304      	adds	r3, #4
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	1dfa      	adds	r2, r7, #7
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	0011      	movs	r1, r2
 8000f40:	2203      	movs	r2, #3
 8000f42:	400a      	ands	r2, r1
 8000f44:	00d2      	lsls	r2, r2, #3
 8000f46:	21ff      	movs	r1, #255	; 0xff
 8000f48:	4091      	lsls	r1, r2
 8000f4a:	000a      	movs	r2, r1
 8000f4c:	43d2      	mvns	r2, r2
 8000f4e:	401a      	ands	r2, r3
 8000f50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	019b      	lsls	r3, r3, #6
 8000f56:	22ff      	movs	r2, #255	; 0xff
 8000f58:	401a      	ands	r2, r3
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	0018      	movs	r0, r3
 8000f60:	2303      	movs	r3, #3
 8000f62:	4003      	ands	r3, r0
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <__NVIC_SetPriority+0xd8>)
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	001c      	movs	r4, r3
 8000f70:	230f      	movs	r3, #15
 8000f72:	4023      	ands	r3, r4
 8000f74:	3b08      	subs	r3, #8
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	3306      	adds	r3, #6
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	18c3      	adds	r3, r0, r3
 8000f80:	3304      	adds	r3, #4
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b003      	add	sp, #12
 8000f8a:	bd90      	pop	{r4, r7, pc}
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <LL_APB1_GRP1_EnableClock>:
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <LL_APB1_GRP1_EnableClock+0x28>)
 8000f9e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <LL_APB1_GRP1_EnableClock+0x28>)
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <LL_APB1_GRP1_EnableClock+0x28>)
 8000faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b004      	add	sp, #16
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <LL_APB2_GRP1_EnableClock>:
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <LL_APB2_GRP1_EnableClock+0x28>)
 8000fca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <LL_APB2_GRP1_EnableClock+0x28>)
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <LL_APB2_GRP1_EnableClock+0x28>)
 8000fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b004      	add	sp, #16
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000

08000fec <LL_IOP_GRP1_EnableClock>:
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <LL_IOP_GRP1_EnableClock+0x28>)
 8000ff6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <LL_IOP_GRP1_EnableClock+0x28>)
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <LL_IOP_GRP1_EnableClock+0x28>)
 8001002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4013      	ands	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	b004      	add	sp, #16
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40021000 	.word	0x40021000

08001018 <LL_TIM_DisableARRPreload>:
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	4393      	bics	r3, r2
 8001028:	001a      	movs	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	601a      	str	r2, [r3, #0]
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <LL_TIM_OC_DisableFast>:
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d00d      	beq.n	8001064 <LL_TIM_OC_DisableFast+0x2c>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	2b10      	cmp	r3, #16
 800104c:	d008      	beq.n	8001060 <LL_TIM_OC_DisableFast+0x28>
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	429a      	cmp	r2, r3
 8001056:	d101      	bne.n	800105c <LL_TIM_OC_DisableFast+0x24>
 8001058:	2304      	movs	r3, #4
 800105a:	e004      	b.n	8001066 <LL_TIM_OC_DisableFast+0x2e>
 800105c:	2306      	movs	r3, #6
 800105e:	e002      	b.n	8001066 <LL_TIM_OC_DisableFast+0x2e>
 8001060:	2302      	movs	r3, #2
 8001062:	e000      	b.n	8001066 <LL_TIM_OC_DisableFast+0x2e>
 8001064:	2300      	movs	r3, #0
 8001066:	200f      	movs	r0, #15
 8001068:	183a      	adds	r2, r7, r0
 800106a:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3318      	adds	r3, #24
 8001070:	0019      	movs	r1, r3
 8001072:	183b      	adds	r3, r7, r0
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <LL_TIM_OC_DisableFast+0x68>)
 8001078:	5cd3      	ldrb	r3, [r2, r3]
 800107a:	18cb      	adds	r3, r1, r3
 800107c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	183a      	adds	r2, r7, r0
 8001084:	7812      	ldrb	r2, [r2, #0]
 8001086:	4907      	ldr	r1, [pc, #28]	; (80010a4 <LL_TIM_OC_DisableFast+0x6c>)
 8001088:	5c8a      	ldrb	r2, [r1, r2]
 800108a:	0011      	movs	r1, r2
 800108c:	2204      	movs	r2, #4
 800108e:	408a      	lsls	r2, r1
 8001090:	43d2      	mvns	r2, r2
 8001092:	401a      	ands	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b004      	add	sp, #16
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	08002348 	.word	0x08002348
 80010a4:	08002350 	.word	0x08002350

080010a8 <LL_TIM_OC_EnablePreload>:
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d00d      	beq.n	80010d4 <LL_TIM_OC_EnablePreload+0x2c>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b10      	cmp	r3, #16
 80010bc:	d008      	beq.n	80010d0 <LL_TIM_OC_EnablePreload+0x28>
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d101      	bne.n	80010cc <LL_TIM_OC_EnablePreload+0x24>
 80010c8:	2304      	movs	r3, #4
 80010ca:	e004      	b.n	80010d6 <LL_TIM_OC_EnablePreload+0x2e>
 80010cc:	2306      	movs	r3, #6
 80010ce:	e002      	b.n	80010d6 <LL_TIM_OC_EnablePreload+0x2e>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e000      	b.n	80010d6 <LL_TIM_OC_EnablePreload+0x2e>
 80010d4:	2300      	movs	r3, #0
 80010d6:	200f      	movs	r0, #15
 80010d8:	183a      	adds	r2, r7, r0
 80010da:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3318      	adds	r3, #24
 80010e0:	0019      	movs	r1, r3
 80010e2:	183b      	adds	r3, r7, r0
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <LL_TIM_OC_EnablePreload+0x68>)
 80010e8:	5cd3      	ldrb	r3, [r2, r3]
 80010ea:	18cb      	adds	r3, r1, r3
 80010ec:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	183b      	adds	r3, r7, r0
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4907      	ldr	r1, [pc, #28]	; (8001114 <LL_TIM_OC_EnablePreload+0x6c>)
 80010f8:	5ccb      	ldrb	r3, [r1, r3]
 80010fa:	0019      	movs	r1, r3
 80010fc:	2308      	movs	r3, #8
 80010fe:	408b      	lsls	r3, r1
 8001100:	431a      	orrs	r2, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	601a      	str	r2, [r3, #0]
}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	b004      	add	sp, #16
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	08002348 	.word	0x08002348
 8001114:	08002350 	.word	0x08002350

08001118 <LL_TIM_SetClockSource>:
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <LL_TIM_SetClockSource+0x24>)
 8001128:	401a      	ands	r2, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	609a      	str	r2, [r3, #8]
}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	ffffbff8 	.word	0xffffbff8

08001140 <LL_TIM_SetTriggerOutput>:
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2270      	movs	r2, #112	; 0x70
 8001150:	4393      	bics	r3, r2
 8001152:	001a      	movs	r2, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	605a      	str	r2, [r3, #4]
}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}

08001164 <LL_TIM_DisableMasterSlaveMode>:
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	4393      	bics	r3, r2
 8001174:	001a      	movs	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	609a      	str	r2, [r3, #8]
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b002      	add	sp, #8
 8001180:	bd80      	pop	{r7, pc}

08001182 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001182:	b5b0      	push	{r4, r5, r7, lr}
 8001184:	b08e      	sub	sp, #56	; 0x38
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001188:	2428      	movs	r4, #40	; 0x28
 800118a:	193b      	adds	r3, r7, r4
 800118c:	0018      	movs	r0, r3
 800118e:	2310      	movs	r3, #16
 8001190:	001a      	movs	r2, r3
 8001192:	2100      	movs	r1, #0
 8001194:	f001 f8b2 	bl	80022fc <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001198:	2518      	movs	r5, #24
 800119a:	197b      	adds	r3, r7, r5
 800119c:	0018      	movs	r0, r3
 800119e:	2310      	movs	r3, #16
 80011a0:	001a      	movs	r2, r3
 80011a2:	2100      	movs	r1, #0
 80011a4:	f001 f8aa 	bl	80022fc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	003b      	movs	r3, r7
 80011aa:	0018      	movs	r0, r3
 80011ac:	2318      	movs	r3, #24
 80011ae:	001a      	movs	r2, r3
 80011b0:	2100      	movs	r1, #0
 80011b2:	f001 f8a3 	bl	80022fc <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f7ff feec 	bl	8000f94 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 125-LL_TIM_IC_FILTER_FDIV1_N2;
 80011bc:	193b      	adds	r3, r7, r4
 80011be:	227d      	movs	r2, #125	; 0x7d
 80011c0:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80011c2:	193b      	adds	r3, r7, r4
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 255;
 80011c8:	193b      	adds	r3, r7, r4
 80011ca:	22ff      	movs	r2, #255	; 0xff
 80011cc:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80011ce:	193b      	adds	r3, r7, r4
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80011d4:	193a      	adds	r2, r7, r4
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	05db      	lsls	r3, r3, #23
 80011da:	0011      	movs	r1, r2
 80011dc:	0018      	movs	r0, r3
 80011de:	f000 fd97 	bl	8001d10 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	05db      	lsls	r3, r3, #23
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff ff16 	bl	8001018 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	05db      	lsls	r3, r3, #23
 80011f0:	2100      	movs	r1, #0
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7ff ff90 	bl	8001118 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	05db      	lsls	r3, r3, #23
 80011fc:	2101      	movs	r1, #1
 80011fe:	0018      	movs	r0, r3
 8001200:	f7ff ff52 	bl	80010a8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001204:	0029      	movs	r1, r5
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2260      	movs	r2, #96	; 0x60
 800120a:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 8001212:	187b      	adds	r3, r7, r1
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001218:	187b      	adds	r3, r7, r1
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800121e:	187a      	adds	r2, r7, r1
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	05db      	lsls	r3, r3, #23
 8001224:	2101      	movs	r1, #1
 8001226:	0018      	movs	r0, r3
 8001228:	f000 fdba 	bl	8001da0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	05db      	lsls	r3, r3, #23
 8001230:	2101      	movs	r1, #1
 8001232:	0018      	movs	r0, r3
 8001234:	f7ff ff00 	bl	8001038 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	05db      	lsls	r3, r3, #23
 800123c:	2100      	movs	r1, #0
 800123e:	0018      	movs	r0, r3
 8001240:	f7ff ff7e 	bl	8001140 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	05db      	lsls	r3, r3, #23
 8001248:	0018      	movs	r0, r3
 800124a:	f7ff ff8b 	bl	8001164 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800124e:	2001      	movs	r0, #1
 8001250:	f7ff fecc 	bl	8000fec <LL_IOP_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA8     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001254:	003b      	movs	r3, r7
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	0052      	lsls	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800125c:	003b      	movs	r3, r7
 800125e:	2202      	movs	r2, #2
 8001260:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001262:	003b      	movs	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001268:	003b      	movs	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800126e:	003b      	movs	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001274:	003b      	movs	r3, r7
 8001276:	2205      	movs	r2, #5
 8001278:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	003a      	movs	r2, r7
 800127c:	23a0      	movs	r3, #160	; 0xa0
 800127e:	05db      	lsls	r3, r3, #23
 8001280:	0011      	movs	r1, r2
 8001282:	0018      	movs	r0, r3
 8001284:	f000 fa81 	bl	800178a <LL_GPIO_Init>

}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b00e      	add	sp, #56	; 0x38
 800128e:	bdb0      	pop	{r4, r5, r7, pc}

08001290 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001296:	003b      	movs	r3, r7
 8001298:	0018      	movs	r0, r3
 800129a:	2310      	movs	r3, #16
 800129c:	001a      	movs	r2, r3
 800129e:	2100      	movs	r1, #0
 80012a0:	f001 f82c 	bl	80022fc <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM21);
 80012a4:	2004      	movs	r0, #4
 80012a6:	f7ff fe8b 	bl	8000fc0 <LL_APB2_GRP1_EnableClock>

  /* TIM21 interrupt Init */
  NVIC_SetPriority(TIM21_IRQn, 0);
 80012aa:	2100      	movs	r1, #0
 80012ac:	2014      	movs	r0, #20
 80012ae:	f7ff fe03 	bl	8000eb8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM21_IRQn);
 80012b2:	2014      	movs	r0, #20
 80012b4:	f7ff fde6 	bl	8000e84 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80012b8:	003b      	movs	r3, r7
 80012ba:	2200      	movs	r2, #0
 80012bc:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80012be:	003b      	movs	r3, r7
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 32000-LL_TIM_IC_FILTER_FDIV1_N2;
 80012c4:	003b      	movs	r3, r7
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <MX_TIM21_Init+0x78>)
 80012c8:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80012ca:	003b      	movs	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM21, &TIM_InitStruct);
 80012d0:	003b      	movs	r3, r7
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <MX_TIM21_Init+0x7c>)
 80012d4:	0019      	movs	r1, r3
 80012d6:	0010      	movs	r0, r2
 80012d8:	f000 fd1a 	bl	8001d10 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM21);
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_TIM21_Init+0x7c>)
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff fe9a 	bl	8001018 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM21, LL_TIM_CLOCKSOURCE_INTERNAL);
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_TIM21_Init+0x7c>)
 80012e6:	2100      	movs	r1, #0
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff ff15 	bl	8001118 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM21, LL_TIM_TRGO_RESET);
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <MX_TIM21_Init+0x7c>)
 80012f0:	2100      	movs	r1, #0
 80012f2:	0018      	movs	r0, r3
 80012f4:	f7ff ff24 	bl	8001140 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM21);
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <MX_TIM21_Init+0x7c>)
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff ff32 	bl	8001164 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b004      	add	sp, #16
 8001306:	bd80      	pop	{r7, pc}
 8001308:	fff07d00 	.word	0xfff07d00
 800130c:	40010800 	.word	0x40010800

08001310 <LL_APB1_GRP1_EnableClock>:
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <LL_APB1_GRP1_EnableClock+0x28>)
 800131a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <LL_APB1_GRP1_EnableClock+0x28>)
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	430a      	orrs	r2, r1
 8001322:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <LL_APB1_GRP1_EnableClock+0x28>)
 8001326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4013      	ands	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	b004      	add	sp, #16
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000

0800133c <LL_IOP_GRP1_EnableClock>:
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <LL_IOP_GRP1_EnableClock+0x28>)
 8001346:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <LL_IOP_GRP1_EnableClock+0x28>)
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	430a      	orrs	r2, r1
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <LL_IOP_GRP1_EnableClock+0x28>)
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4013      	ands	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	b004      	add	sp, #16
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40021000 	.word	0x40021000

08001368 <LL_USART_Enable>:
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2201      	movs	r2, #1
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	601a      	str	r2, [r3, #0]
}
 800137c:	46c0      	nop			; (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	b002      	add	sp, #8
 8001382:	bd80      	pop	{r7, pc}

08001384 <LL_USART_ConfigAsyncMode>:
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <LL_USART_ConfigAsyncMode+0x2c>)
 8001392:	401a      	ands	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	222a      	movs	r2, #42	; 0x2a
 800139e:	4393      	bics	r3, r2
 80013a0:	001a      	movs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	609a      	str	r2, [r3, #8]
}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b002      	add	sp, #8
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	ffffb7ff 	.word	0xffffb7ff

080013b4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b08f      	sub	sp, #60	; 0x3c
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80013ba:	241c      	movs	r4, #28
 80013bc:	193b      	adds	r3, r7, r4
 80013be:	0018      	movs	r0, r3
 80013c0:	231c      	movs	r3, #28
 80013c2:	001a      	movs	r2, r3
 80013c4:	2100      	movs	r1, #0
 80013c6:	f000 ff99 	bl	80022fc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	0018      	movs	r0, r3
 80013ce:	2318      	movs	r3, #24
 80013d0:	001a      	movs	r2, r3
 80013d2:	2100      	movs	r1, #0
 80013d4:	f000 ff92 	bl	80022fc <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff ff97 	bl	8001310 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff ffaa 	bl	800133c <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA0-CK_IN   ------> USART2_RX
  PA2   ------> USART2_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2202      	movs	r2, #2
 80013f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2203      	movs	r2, #3
 80013f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	1d3a      	adds	r2, r7, #4
 800140e:	23a0      	movs	r3, #160	; 0xa0
 8001410:	05db      	lsls	r3, r3, #23
 8001412:	0011      	movs	r1, r2
 8001414:	0018      	movs	r0, r3
 8001416:	f000 f9b8 	bl	800178a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2204      	movs	r2, #4
 800141e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2202      	movs	r2, #2
 8001424:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2203      	movs	r2, #3
 800142a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2204      	movs	r2, #4
 800143c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	1d3a      	adds	r2, r7, #4
 8001440:	23a0      	movs	r3, #160	; 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f000 f99f 	bl	800178a <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800144c:	193b      	adds	r3, r7, r4
 800144e:	22e1      	movs	r2, #225	; 0xe1
 8001450:	0252      	lsls	r2, r2, #9
 8001452:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001454:	0021      	movs	r1, r4
 8001456:	187b      	adds	r3, r7, r1
 8001458:	2200      	movs	r2, #0
 800145a:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800145c:	187b      	adds	r3, r7, r1
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001462:	187b      	adds	r3, r7, r1
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001468:	187b      	adds	r3, r7, r1
 800146a:	220c      	movs	r2, #12
 800146c:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800146e:	187b      	adds	r3, r7, r1
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001474:	187b      	adds	r3, r7, r1
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 800147a:	187b      	adds	r3, r7, r1
 800147c:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <MX_USART2_UART_Init+0xec>)
 800147e:	0019      	movs	r1, r3
 8001480:	0010      	movs	r0, r2
 8001482:	f000 fe87 	bl	8002194 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_USART2_UART_Init+0xec>)
 8001488:	0018      	movs	r0, r3
 800148a:	f7ff ff7b 	bl	8001384 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <MX_USART2_UART_Init+0xec>)
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff ff69 	bl	8001368 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	46bd      	mov	sp, r7
 800149a:	b00f      	add	sp, #60	; 0x3c
 800149c:	bd90      	pop	{r4, r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	40004400 	.word	0x40004400

080014a4 <Reset_Handler>:
 80014a4:	4813      	ldr	r0, [pc, #76]	; (80014f4 <LoopForever+0x2>)
 80014a6:	4685      	mov	sp, r0
 80014a8:	4813      	ldr	r0, [pc, #76]	; (80014f8 <LoopForever+0x6>)
 80014aa:	6801      	ldr	r1, [r0, #0]
 80014ac:	0e09      	lsrs	r1, r1, #24
 80014ae:	4a13      	ldr	r2, [pc, #76]	; (80014fc <LoopForever+0xa>)
 80014b0:	4291      	cmp	r1, r2
 80014b2:	d105      	bne.n	80014c0 <ApplicationStart>
 80014b4:	4812      	ldr	r0, [pc, #72]	; (8001500 <LoopForever+0xe>)
 80014b6:	4913      	ldr	r1, [pc, #76]	; (8001504 <LoopForever+0x12>)
 80014b8:	6001      	str	r1, [r0, #0]
 80014ba:	4813      	ldr	r0, [pc, #76]	; (8001508 <LoopForever+0x16>)
 80014bc:	4913      	ldr	r1, [pc, #76]	; (800150c <LoopForever+0x1a>)
 80014be:	6001      	str	r1, [r0, #0]

080014c0 <ApplicationStart>:
 80014c0:	4813      	ldr	r0, [pc, #76]	; (8001510 <LoopForever+0x1e>)
 80014c2:	4914      	ldr	r1, [pc, #80]	; (8001514 <LoopForever+0x22>)
 80014c4:	4a14      	ldr	r2, [pc, #80]	; (8001518 <LoopForever+0x26>)
 80014c6:	2300      	movs	r3, #0
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:
 80014ca:	58d4      	ldr	r4, [r2, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:
 80014d0:	18c4      	adds	r4, r0, r3
 80014d2:	428c      	cmp	r4, r1
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
 80014d6:	4a11      	ldr	r2, [pc, #68]	; (800151c <LoopForever+0x2a>)
 80014d8:	4c11      	ldr	r4, [pc, #68]	; (8001520 <LoopForever+0x2e>)
 80014da:	2300      	movs	r3, #0
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:
 80014e2:	42a2      	cmp	r2, r4
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>
 80014e6:	f7ff fcc7 	bl	8000e78 <SystemInit>
 80014ea:	f000 fee3 	bl	80022b4 <__libc_init_array>
 80014ee:	f7ff fb47 	bl	8000b80 <main>

080014f2 <LoopForever>:
 80014f2:	e7fe      	b.n	80014f2 <LoopForever>
 80014f4:	20000800 	.word	0x20000800
 80014f8:	00000004 	.word	0x00000004
 80014fc:	0000001f 	.word	0x0000001f
 8001500:	40021034 	.word	0x40021034
 8001504:	00000001 	.word	0x00000001
 8001508:	40010000 	.word	0x40010000
 800150c:	00000000 	.word	0x00000000
 8001510:	20000000 	.word	0x20000000
 8001514:	20000014 	.word	0x20000014
 8001518:	08002360 	.word	0x08002360
 800151c:	20000014 	.word	0x20000014
 8001520:	20000030 	.word	0x20000030

08001524 <ADC1_COMP_IRQHandler>:
 8001524:	e7fe      	b.n	8001524 <ADC1_COMP_IRQHandler>

08001526 <LL_ADC_IsEnabled>:
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2201      	movs	r2, #1
 8001534:	4013      	ands	r3, r2
 8001536:	3b01      	subs	r3, #1
 8001538:	425a      	negs	r2, r3
 800153a:	4153      	adcs	r3, r2
 800153c:	b2db      	uxtb	r3, r3
 800153e:	0018      	movs	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <LL_ADC_Init>:
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	230f      	movs	r3, #15
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	0018      	movs	r0, r3
 800155e:	f7ff ffe2 	bl	8001526 <LL_ADC_IsEnabled>
 8001562:	1e03      	subs	r3, r0, #0
 8001564:	d118      	bne.n	8001598 <LL_ADC_Init+0x50>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <LL_ADC_Init+0x68>)
 800156c:	401a      	ands	r2, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	6859      	ldr	r1, [r3, #4]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	4319      	orrs	r1, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	430b      	orrs	r3, r1
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	089a      	lsrs	r2, r3, #2
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	611a      	str	r2, [r3, #16]
 8001596:	e003      	b.n	80015a0 <LL_ADC_Init+0x58>
 8001598:	230f      	movs	r3, #15
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	230f      	movs	r3, #15
 80015a2:	18fb      	adds	r3, r7, r3
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b004      	add	sp, #16
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	ffff3fc7 	.word	0xffff3fc7

080015b4 <LL_ADC_REG_Init>:
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	230f      	movs	r3, #15
 80015c0:	18fb      	adds	r3, r7, r3
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7ff ffac 	bl	8001526 <LL_ADC_IsEnabled>
 80015ce:	1e03      	subs	r3, r0, #0
 80015d0:	d115      	bne.n	80015fe <LL_ADC_REG_Init+0x4a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <LL_ADC_REG_Init+0x60>)
 80015d8:	401a      	ands	r2, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	6819      	ldr	r1, [r3, #0]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4319      	orrs	r1, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4319      	orrs	r1, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	4319      	orrs	r1, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	430b      	orrs	r3, r1
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	e003      	b.n	8001606 <LL_ADC_REG_Init+0x52>
 80015fe:	230f      	movs	r3, #15
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	230f      	movs	r3, #15
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	0018      	movs	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	b004      	add	sp, #16
 8001612:	bd80      	pop	{r7, pc}
 8001614:	fffec23c 	.word	0xfffec23c

08001618 <LL_GPIO_SetPinMode>:
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6819      	ldr	r1, [r3, #0]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	435b      	muls	r3, r3
 800162c:	001a      	movs	r2, r3
 800162e:	0013      	movs	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	189b      	adds	r3, r3, r2
 8001634:	43db      	mvns	r3, r3
 8001636:	400b      	ands	r3, r1
 8001638:	001a      	movs	r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	435b      	muls	r3, r3
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	434b      	muls	r3, r1
 8001642:	431a      	orrs	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b004      	add	sp, #16
 800164e:	bd80      	pop	{r7, pc}

08001650 <LL_GPIO_SetPinOutputType>:
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	43d2      	mvns	r2, r2
 8001664:	401a      	ands	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	434b      	muls	r3, r1
 800166c:	431a      	orrs	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	b004      	add	sp, #16
 8001678:	bd80      	pop	{r7, pc}

0800167a <LL_GPIO_SetPinSpeed>:
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	435b      	muls	r3, r3
 800168e:	001a      	movs	r2, r3
 8001690:	0013      	movs	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	189b      	adds	r3, r3, r2
 8001696:	43db      	mvns	r3, r3
 8001698:	400b      	ands	r3, r1
 800169a:	001a      	movs	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	435b      	muls	r3, r3
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	434b      	muls	r3, r1
 80016a4:	431a      	orrs	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b004      	add	sp, #16
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <LL_GPIO_SetPinPull>:
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	68d9      	ldr	r1, [r3, #12]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	435b      	muls	r3, r3
 80016c6:	001a      	movs	r2, r3
 80016c8:	0013      	movs	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	189b      	adds	r3, r3, r2
 80016ce:	43db      	mvns	r3, r3
 80016d0:	400b      	ands	r3, r1
 80016d2:	001a      	movs	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	435b      	muls	r3, r3
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	434b      	muls	r3, r1
 80016dc:	431a      	orrs	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b004      	add	sp, #16
 80016e8:	bd80      	pop	{r7, pc}

080016ea <LL_GPIO_SetAFPin_0_7>:
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a19      	ldr	r1, [r3, #32]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	435b      	muls	r3, r3
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	4353      	muls	r3, r2
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	435a      	muls	r2, r3
 8001706:	0013      	movs	r3, r2
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	1a9b      	subs	r3, r3, r2
 800170c:	43db      	mvns	r3, r3
 800170e:	400b      	ands	r3, r1
 8001710:	001a      	movs	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	435b      	muls	r3, r3
 8001716:	68b9      	ldr	r1, [r7, #8]
 8001718:	434b      	muls	r3, r1
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	434b      	muls	r3, r1
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	434b      	muls	r3, r1
 8001722:	431a      	orrs	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	621a      	str	r2, [r3, #32]
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	b004      	add	sp, #16
 800172e:	bd80      	pop	{r7, pc}

08001730 <LL_GPIO_SetAFPin_8_15>:
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	0a12      	lsrs	r2, r2, #8
 8001748:	4353      	muls	r3, r2
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	0a12      	lsrs	r2, r2, #8
 800174e:	4353      	muls	r3, r2
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	0a12      	lsrs	r2, r2, #8
 8001754:	435a      	muls	r2, r3
 8001756:	0013      	movs	r3, r2
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	1a9b      	subs	r3, r3, r2
 800175c:	43db      	mvns	r3, r3
 800175e:	400b      	ands	r3, r1
 8001760:	001a      	movs	r2, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	68b9      	ldr	r1, [r7, #8]
 8001768:	0a09      	lsrs	r1, r1, #8
 800176a:	434b      	muls	r3, r1
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	0a09      	lsrs	r1, r1, #8
 8001770:	434b      	muls	r3, r1
 8001772:	68b9      	ldr	r1, [r7, #8]
 8001774:	0a09      	lsrs	r1, r1, #8
 8001776:	434b      	muls	r3, r1
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	434b      	muls	r3, r1
 800177c:	431a      	orrs	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	46bd      	mov	sp, r7
 8001786:	b004      	add	sp, #16
 8001788:	bd80      	pop	{r7, pc}

0800178a <LL_GPIO_Init>:
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	e048      	b.n	8001830 <LL_GPIO_Init+0xa6>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2101      	movs	r1, #1
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4091      	lsls	r1, r2
 80017a8:	000a      	movs	r2, r1
 80017aa:	4013      	ands	r3, r2
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d03a      	beq.n	800182a <LL_GPIO_Init+0xa0>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d003      	beq.n	80017c4 <LL_GPIO_Init+0x3a>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d10e      	bne.n	80017e2 <LL_GPIO_Init+0x58>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff ff54 	bl	800167a <LL_GPIO_SetPinSpeed>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	6819      	ldr	r1, [r3, #0]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	0018      	movs	r0, r3
 80017de:	f7ff ff37 	bl	8001650 <LL_GPIO_SetPinOutputType>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	0018      	movs	r0, r3
 80017ec:	f7ff ff61 	bl	80016b2 <LL_GPIO_SetPinPull>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d111      	bne.n	800181c <LL_GPIO_Init+0x92>
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2bff      	cmp	r3, #255	; 0xff
 80017fc:	d807      	bhi.n	800180e <LL_GPIO_Init+0x84>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	0018      	movs	r0, r3
 8001808:	f7ff ff6f 	bl	80016ea <LL_GPIO_SetAFPin_0_7>
 800180c:	e006      	b.n	800181c <LL_GPIO_Init+0x92>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	0018      	movs	r0, r3
 8001818:	f7ff ff8a 	bl	8001730 <LL_GPIO_SetAFPin_8_15>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff fef7 	bl	8001618 <LL_GPIO_SetPinMode>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3301      	adds	r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	40da      	lsrs	r2, r3
 8001838:	1e13      	subs	r3, r2, #0
 800183a:	d1b0      	bne.n	800179e <LL_GPIO_Init+0x14>
 800183c:	2300      	movs	r3, #0
 800183e:	0018      	movs	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	b004      	add	sp, #16
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <LL_RCC_HSI_IsReady>:
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <LL_RCC_HSI_IsReady+0x1c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2204      	movs	r2, #4
 8001852:	4013      	ands	r3, r2
 8001854:	2b04      	cmp	r3, #4
 8001856:	d101      	bne.n	800185c <LL_RCC_HSI_IsReady+0x14>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <LL_RCC_HSI_IsReady+0x16>
 800185c:	2300      	movs	r3, #0
 800185e:	0018      	movs	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000

08001868 <LL_RCC_LSE_IsReady>:
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <LL_RCC_LSE_IsReady+0x24>)
 800186e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	401a      	ands	r2, r3
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	429a      	cmp	r2, r3
 800187c:	d101      	bne.n	8001882 <LL_RCC_LSE_IsReady+0x1a>
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <LL_RCC_LSE_IsReady+0x1c>
 8001882:	2300      	movs	r3, #0
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	40021000 	.word	0x40021000

08001890 <LL_RCC_MSI_GetRange>:
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <LL_RCC_MSI_GetRange+0x14>)
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	23e0      	movs	r3, #224	; 0xe0
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	4013      	ands	r3, r2
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000

080018a8 <LL_RCC_GetSysClkSource>:
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <LL_RCC_GetSysClkSource+0x14>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	220c      	movs	r2, #12
 80018b2:	4013      	ands	r3, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	40021000 	.word	0x40021000

080018c0 <LL_RCC_GetAHBPrescaler>:
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <LL_RCC_GetAHBPrescaler+0x14>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	22f0      	movs	r2, #240	; 0xf0
 80018ca:	4013      	ands	r3, r2
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	40021000 	.word	0x40021000

080018d8 <LL_RCC_GetAPB1Prescaler>:
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	23e0      	movs	r3, #224	; 0xe0
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4013      	ands	r3, r2
 80018e6:	0018      	movs	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000

080018f0 <LL_RCC_GetUSARTClockSource>:
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <LL_RCC_GetUSARTClockSource+0x20>)
 80018fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	401a      	ands	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	041b      	lsls	r3, r3, #16
 8001904:	4313      	orrs	r3, r2
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b002      	add	sp, #8
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	40021000 	.word	0x40021000

08001914 <LL_RCC_PLL_GetMainSource>:
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <LL_RCC_PLL_GetMainSource+0x14>)
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	025b      	lsls	r3, r3, #9
 8001920:	4013      	ands	r3, r2
 8001922:	0018      	movs	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000

0800192c <LL_RCC_PLL_GetMultiplicator>:
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	23f0      	movs	r3, #240	; 0xf0
 8001936:	039b      	lsls	r3, r3, #14
 8001938:	4013      	ands	r3, r2
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000

08001944 <LL_RCC_PLL_GetDivider>:
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <LL_RCC_PLL_GetDivider+0x14>)
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	23c0      	movs	r3, #192	; 0xc0
 800194e:	041b      	lsls	r3, r3, #16
 8001950:	4013      	ands	r3, r2
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000

0800195c <LL_RCC_IsActiveFlag_HSIDIV>:
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2210      	movs	r2, #16
 8001966:	4013      	ands	r3, r2
 8001968:	2b10      	cmp	r3, #16
 800196a:	d101      	bne.n	8001970 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8001970:	2300      	movs	r3, #0
 8001972:	0018      	movs	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40021000 	.word	0x40021000

0800197c <LL_RCC_GetUSARTClockFreq>:
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d139      	bne.n	8001a02 <LL_RCC_GetUSARTClockFreq+0x86>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	0018      	movs	r0, r3
 8001992:	f7ff ffad 	bl	80018f0 <LL_RCC_GetUSARTClockSource>
 8001996:	0003      	movs	r3, r0
 8001998:	4a1f      	ldr	r2, [pc, #124]	; (8001a18 <LL_RCC_GetUSARTClockFreq+0x9c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d01c      	beq.n	80019d8 <LL_RCC_GetUSARTClockFreq+0x5c>
 800199e:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <LL_RCC_GetUSARTClockFreq+0x9c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d821      	bhi.n	80019e8 <LL_RCC_GetUSARTClockFreq+0x6c>
 80019a4:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <LL_RCC_GetUSARTClockFreq+0xa0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d003      	beq.n	80019b2 <LL_RCC_GetUSARTClockFreq+0x36>
 80019aa:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <LL_RCC_GetUSARTClockFreq+0xa4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d005      	beq.n	80019bc <LL_RCC_GetUSARTClockFreq+0x40>
 80019b0:	e01a      	b.n	80019e8 <LL_RCC_GetUSARTClockFreq+0x6c>
 80019b2:	f000 f83b 	bl	8001a2c <RCC_GetSystemClockFreq>
 80019b6:	0003      	movs	r3, r0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	e027      	b.n	8001a0c <LL_RCC_GetUSARTClockFreq+0x90>
 80019bc:	f7ff ff44 	bl	8001848 <LL_RCC_HSI_IsReady>
 80019c0:	1e03      	subs	r3, r0, #0
 80019c2:	d020      	beq.n	8001a06 <LL_RCC_GetUSARTClockFreq+0x8a>
 80019c4:	f7ff ffca 	bl	800195c <LL_RCC_IsActiveFlag_HSIDIV>
 80019c8:	1e03      	subs	r3, r0, #0
 80019ca:	d002      	beq.n	80019d2 <LL_RCC_GetUSARTClockFreq+0x56>
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <LL_RCC_GetUSARTClockFreq+0xa8>)
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	e019      	b.n	8001a06 <LL_RCC_GetUSARTClockFreq+0x8a>
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <LL_RCC_GetUSARTClockFreq+0xac>)
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	e016      	b.n	8001a06 <LL_RCC_GetUSARTClockFreq+0x8a>
 80019d8:	f7ff ff46 	bl	8001868 <LL_RCC_LSE_IsReady>
 80019dc:	1e03      	subs	r3, r0, #0
 80019de:	d014      	beq.n	8001a0a <LL_RCC_GetUSARTClockFreq+0x8e>
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	e010      	b.n	8001a0a <LL_RCC_GetUSARTClockFreq+0x8e>
 80019e8:	f000 f820 	bl	8001a2c <RCC_GetSystemClockFreq>
 80019ec:	0003      	movs	r3, r0
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 f860 	bl	8001ab4 <RCC_GetHCLKClockFreq>
 80019f4:	0003      	movs	r3, r0
 80019f6:	0018      	movs	r0, r3
 80019f8:	f000 f872 	bl	8001ae0 <RCC_GetPCLK1ClockFreq>
 80019fc:	0003      	movs	r3, r0
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e004      	b.n	8001a0c <LL_RCC_GetUSARTClockFreq+0x90>
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	e002      	b.n	8001a0c <LL_RCC_GetUSARTClockFreq+0x90>
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	e000      	b.n	8001a0c <LL_RCC_GetUSARTClockFreq+0x90>
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b004      	add	sp, #16
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	000c000c 	.word	0x000c000c
 8001a1c:	000c0004 	.word	0x000c0004
 8001a20:	000c0008 	.word	0x000c0008
 8001a24:	003d0900 	.word	0x003d0900
 8001a28:	00f42400 	.word	0x00f42400

08001a2c <RCC_GetSystemClockFreq>:
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	f7ff ff39 	bl	80018a8 <LL_RCC_GetSysClkSource>
 8001a36:	0003      	movs	r3, r0
 8001a38:	2b0c      	cmp	r3, #12
 8001a3a:	d020      	beq.n	8001a7e <RCC_GetSystemClockFreq+0x52>
 8001a3c:	d824      	bhi.n	8001a88 <RCC_GetSystemClockFreq+0x5c>
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d01a      	beq.n	8001a78 <RCC_GetSystemClockFreq+0x4c>
 8001a42:	d821      	bhi.n	8001a88 <RCC_GetSystemClockFreq+0x5c>
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d002      	beq.n	8001a4e <RCC_GetSystemClockFreq+0x22>
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d00b      	beq.n	8001a64 <RCC_GetSystemClockFreq+0x38>
 8001a4c:	e01c      	b.n	8001a88 <RCC_GetSystemClockFreq+0x5c>
 8001a4e:	f7ff ff1f 	bl	8001890 <LL_RCC_MSI_GetRange>
 8001a52:	0003      	movs	r3, r0
 8001a54:	0b5b      	lsrs	r3, r3, #13
 8001a56:	3301      	adds	r3, #1
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	0212      	lsls	r2, r2, #8
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	0013      	movs	r3, r2
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	e01c      	b.n	8001a9e <RCC_GetSystemClockFreq+0x72>
 8001a64:	f7ff ff7a 	bl	800195c <LL_RCC_IsActiveFlag_HSIDIV>
 8001a68:	1e03      	subs	r3, r0, #0
 8001a6a:	d002      	beq.n	8001a72 <RCC_GetSystemClockFreq+0x46>
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <RCC_GetSystemClockFreq+0x7c>)
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	e015      	b.n	8001a9e <RCC_GetSystemClockFreq+0x72>
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <RCC_GetSystemClockFreq+0x80>)
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	e012      	b.n	8001a9e <RCC_GetSystemClockFreq+0x72>
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <RCC_GetSystemClockFreq+0x84>)
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	e00f      	b.n	8001a9e <RCC_GetSystemClockFreq+0x72>
 8001a7e:	f000 f843 	bl	8001b08 <RCC_PLL_GetFreqDomain_SYS>
 8001a82:	0003      	movs	r3, r0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	e00a      	b.n	8001a9e <RCC_GetSystemClockFreq+0x72>
 8001a88:	f7ff ff02 	bl	8001890 <LL_RCC_MSI_GetRange>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	0b5b      	lsrs	r3, r3, #13
 8001a90:	3301      	adds	r3, #1
 8001a92:	2280      	movs	r2, #128	; 0x80
 8001a94:	0212      	lsls	r2, r2, #8
 8001a96:	409a      	lsls	r2, r3
 8001a98:	0013      	movs	r3, r2
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	003d0900 	.word	0x003d0900
 8001aac:	00f42400 	.word	0x00f42400
 8001ab0:	007a1200 	.word	0x007a1200

08001ab4 <RCC_GetHCLKClockFreq>:
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	f7ff ff00 	bl	80018c0 <LL_RCC_GetAHBPrescaler>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <RCC_GetHCLKClockFreq+0x28>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	001a      	movs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	40d3      	lsrs	r3, r2
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b002      	add	sp, #8
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	08002324 	.word	0x08002324

08001ae0 <RCC_GetPCLK1ClockFreq>:
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	f7ff fef6 	bl	80018d8 <LL_RCC_GetAPB1Prescaler>
 8001aec:	0003      	movs	r3, r0
 8001aee:	0a1b      	lsrs	r3, r3, #8
 8001af0:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <RCC_GetPCLK1ClockFreq+0x24>)
 8001af2:	5cd3      	ldrb	r3, [r2, r3]
 8001af4:	001a      	movs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	40d3      	lsrs	r3, r2
 8001afa:	0018      	movs	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b002      	add	sp, #8
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	08002334 	.word	0x08002334

08001b08 <RCC_PLL_GetFreqDomain_SYS>:
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	f7ff ff01 	bl	8001914 <LL_RCC_PLL_GetMainSource>
 8001b12:	0003      	movs	r3, r0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d109      	bne.n	8001b30 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001b1c:	f7ff ff1e 	bl	800195c <LL_RCC_IsActiveFlag_HSIDIV>
 8001b20:	1e03      	subs	r3, r0, #0
 8001b22:	d002      	beq.n	8001b2a <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	e005      	b.n	8001b36 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	e002      	b.n	8001b36 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	f7ff fef9 	bl	800192c <LL_RCC_PLL_GetMultiplicator>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	0c9b      	lsrs	r3, r3, #18
 8001b3e:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
 8001b42:	001a      	movs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4353      	muls	r3, r2
 8001b48:	001c      	movs	r4, r3
 8001b4a:	f7ff fefb 	bl	8001944 <LL_RCC_PLL_GetDivider>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	0d9b      	lsrs	r3, r3, #22
 8001b52:	3301      	adds	r3, #1
 8001b54:	0019      	movs	r1, r3
 8001b56:	0020      	movs	r0, r4
 8001b58:	f7fe fad6 	bl	8000108 <__udivsi3>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	0018      	movs	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b003      	add	sp, #12
 8001b64:	bd90      	pop	{r4, r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	003d0900 	.word	0x003d0900
 8001b6c:	00f42400 	.word	0x00f42400
 8001b70:	007a1200 	.word	0x007a1200
 8001b74:	0800233c 	.word	0x0800233c

08001b78 <LL_SPI_IsEnabled>:
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2240      	movs	r2, #64	; 0x40
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b40      	cmp	r3, #64	; 0x40
 8001b8a:	d101      	bne.n	8001b90 <LL_SPI_IsEnabled+0x18>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <LL_SPI_IsEnabled+0x1a>
 8001b90:	2300      	movs	r3, #0
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b002      	add	sp, #8
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <LL_SPI_SetCRCPolynomial>:
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	001a      	movs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	611a      	str	r2, [r3, #16]
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b002      	add	sp, #8
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <LL_SPI_Init>:
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	230f      	movs	r3, #15
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7ff ffd3 	bl	8001b78 <LL_SPI_IsEnabled>
 8001bd2:	1e03      	subs	r3, r0, #0
 8001bd4:	d13c      	bne.n	8001c50 <LL_SPI_Init+0x98>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a21      	ldr	r2, [pc, #132]	; (8001c60 <LL_SPI_Init+0xa8>)
 8001bdc:	401a      	ands	r2, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	6819      	ldr	r1, [r3, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4319      	orrs	r1, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4319      	orrs	r1, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	4319      	orrs	r1, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	4319      	orrs	r1, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	4319      	orrs	r1, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4319      	orrs	r1, r3
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4319      	orrs	r1, r3
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	4393      	bics	r3, r2
 8001c20:	001a      	movs	r2, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	0c1b      	lsrs	r3, r3, #16
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6a1a      	ldr	r2, [r3, #32]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	019b      	lsls	r3, r3, #6
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d106      	bne.n	8001c48 <LL_SPI_Init+0x90>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0011      	movs	r1, r2
 8001c42:	0018      	movs	r0, r3
 8001c44:	f7ff ffa9 	bl	8001b9a <LL_SPI_SetCRCPolynomial>
 8001c48:	230f      	movs	r3, #15
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
 8001c50:	230f      	movs	r3, #15
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b004      	add	sp, #16
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	ffff0040 	.word	0xffff0040

08001c64 <LL_TIM_SetPrescaler>:
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <LL_TIM_SetAutoReload>:
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c8c:	46c0      	nop			; (mov r8, r8)
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b002      	add	sp, #8
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <LL_TIM_OC_SetCompareCH1>:
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca4:	46c0      	nop			; (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b002      	add	sp, #8
 8001caa:	bd80      	pop	{r7, pc}

08001cac <LL_TIM_OC_SetCompareCH2>:
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	639a      	str	r2, [r3, #56]	; 0x38
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b002      	add	sp, #8
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <LL_TIM_OC_SetCompareCH3>:
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b002      	add	sp, #8
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <LL_TIM_OC_SetCompareCH4>:
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <LL_TIM_GenerateEvent_UPDATE>:
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	2201      	movs	r2, #1
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	615a      	str	r2, [r3, #20]
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <LL_TIM_Init>:
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	05db      	lsls	r3, r3, #23
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d003      	beq.n	8001d32 <LL_TIM_Init+0x22>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a1a      	ldr	r2, [pc, #104]	; (8001d98 <LL_TIM_Init+0x88>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d107      	bne.n	8001d42 <LL_TIM_Init+0x32>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2270      	movs	r2, #112	; 0x70
 8001d36:	4393      	bics	r3, r2
 8001d38:	001a      	movs	r2, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	05db      	lsls	r3, r3, #23
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d003      	beq.n	8001d54 <LL_TIM_Init+0x44>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <LL_TIM_Init+0x88>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d106      	bne.n	8001d62 <LL_TIM_Init+0x52>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <LL_TIM_Init+0x8c>)
 8001d58:	401a      	ands	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	0011      	movs	r1, r2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f7ff ff83 	bl	8001c7c <LL_TIM_SetAutoReload>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	001a      	movs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	0011      	movs	r1, r2
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7ff ff6f 	bl	8001c64 <LL_TIM_SetPrescaler>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7ff ffb3 	bl	8001cf4 <LL_TIM_GenerateEvent_UPDATE>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	0018      	movs	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b004      	add	sp, #16
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40010800 	.word	0x40010800
 8001d9c:	fffffcff 	.word	0xfffffcff

08001da0 <LL_TIM_OC_Init>:
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	2317      	movs	r3, #23
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	015b      	lsls	r3, r3, #5
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d036      	beq.n	8001e2c <LL_TIM_OC_Init+0x8c>
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	015b      	lsls	r3, r3, #5
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d83c      	bhi.n	8001e42 <LL_TIM_OC_Init+0xa2>
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d021      	beq.n	8001e16 <LL_TIM_OC_Init+0x76>
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d832      	bhi.n	8001e42 <LL_TIM_OC_Init+0xa2>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d003      	beq.n	8001dea <LL_TIM_OC_Init+0x4a>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b10      	cmp	r3, #16
 8001de6:	d00b      	beq.n	8001e00 <LL_TIM_OC_Init+0x60>
 8001de8:	e02b      	b.n	8001e42 <LL_TIM_OC_Init+0xa2>
 8001dea:	2317      	movs	r3, #23
 8001dec:	18fc      	adds	r4, r7, r3
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	0011      	movs	r1, r2
 8001df4:	0018      	movs	r0, r3
 8001df6:	f000 f82c 	bl	8001e52 <OC1Config>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	7023      	strb	r3, [r4, #0]
 8001dfe:	e021      	b.n	8001e44 <LL_TIM_OC_Init+0xa4>
 8001e00:	2317      	movs	r3, #23
 8001e02:	18fc      	adds	r4, r7, r3
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	0011      	movs	r1, r2
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f000 f868 	bl	8001ee0 <OC2Config>
 8001e10:	0003      	movs	r3, r0
 8001e12:	7023      	strb	r3, [r4, #0]
 8001e14:	e016      	b.n	8001e44 <LL_TIM_OC_Init+0xa4>
 8001e16:	2317      	movs	r3, #23
 8001e18:	18fc      	adds	r4, r7, r3
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	0011      	movs	r1, r2
 8001e20:	0018      	movs	r0, r3
 8001e22:	f000 f8a9 	bl	8001f78 <OC3Config>
 8001e26:	0003      	movs	r3, r0
 8001e28:	7023      	strb	r3, [r4, #0]
 8001e2a:	e00b      	b.n	8001e44 <LL_TIM_OC_Init+0xa4>
 8001e2c:	2317      	movs	r3, #23
 8001e2e:	18fc      	adds	r4, r7, r3
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	0011      	movs	r1, r2
 8001e36:	0018      	movs	r0, r3
 8001e38:	f000 f8e8 	bl	800200c <OC4Config>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	7023      	strb	r3, [r4, #0]
 8001e40:	e000      	b.n	8001e44 <LL_TIM_OC_Init+0xa4>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	2317      	movs	r3, #23
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b007      	add	sp, #28
 8001e50:	bd90      	pop	{r4, r7, pc}

08001e52 <OC1Config>:
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	2201      	movs	r2, #1
 8001e62:	4393      	bics	r3, r2
 8001e64:	001a      	movs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	621a      	str	r2, [r3, #32]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2203      	movs	r2, #3
 8001e80:	4393      	bics	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2270      	movs	r2, #112	; 0x70
 8001e88:	4393      	bics	r3, r2
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2202      	movs	r2, #2
 8001e98:	4393      	bics	r3, r2
 8001e9a:	001a      	movs	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4393      	bics	r3, r2
 8001eaa:	001a      	movs	r2, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	619a      	str	r2, [r3, #24]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	0011      	movs	r1, r2
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff fee3 	bl	8001c94 <LL_TIM_OC_SetCompareCH1>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	621a      	str	r2, [r3, #32]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b006      	add	sp, #24
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <OC2Config>:
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	2210      	movs	r2, #16
 8001ef0:	4393      	bics	r3, r2
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	621a      	str	r2, [r3, #32]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <OC2Config+0x90>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <OC2Config+0x94>)
 8001f16:	401a      	ands	r2, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2220      	movs	r2, #32
 8001f26:	4393      	bics	r3, r2
 8001f28:	001a      	movs	r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4313      	orrs	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2210      	movs	r2, #16
 8001f38:	4393      	bics	r3, r2
 8001f3a:	001a      	movs	r2, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	619a      	str	r2, [r3, #24]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0011      	movs	r1, r2
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f7ff fea6 	bl	8001cac <LL_TIM_OC_SetCompareCH2>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	621a      	str	r2, [r3, #32]
 8001f66:	2300      	movs	r3, #0
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b006      	add	sp, #24
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	fffffcff 	.word	0xfffffcff
 8001f74:	ffff8fff 	.word	0xffff8fff

08001f78 <OC3Config>:
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <OC3Config+0x8c>)
 8001f88:	401a      	ands	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	621a      	str	r2, [r3, #32]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	4393      	bics	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2270      	movs	r2, #112	; 0x70
 8001fac:	4393      	bics	r3, r2
 8001fae:	001a      	movs	r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	4a13      	ldr	r2, [pc, #76]	; (8002008 <OC3Config+0x90>)
 8001fbc:	401a      	ands	r2, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <OC3Config+0x8c>)
 8001fcc:	401a      	ands	r2, r3
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	61da      	str	r2, [r3, #28]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	0011      	movs	r1, r2
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7ff fe69 	bl	8001cc4 <LL_TIM_OC_SetCompareCH3>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	621a      	str	r2, [r3, #32]
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b006      	add	sp, #24
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	fffffeff 	.word	0xfffffeff
 8002008:	fffffdff 	.word	0xfffffdff

0800200c <OC4Config>:
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4a1f      	ldr	r2, [pc, #124]	; (8002098 <OC4Config+0x8c>)
 800201c:	401a      	ands	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	621a      	str	r2, [r3, #32]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a19      	ldr	r2, [pc, #100]	; (800209c <OC4Config+0x90>)
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <OC4Config+0x94>)
 8002040:	401a      	ands	r2, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	4313      	orrs	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <OC4Config+0x98>)
 8002050:	401a      	ands	r2, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	031b      	lsls	r3, r3, #12
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <OC4Config+0x8c>)
 8002060:	401a      	ands	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	031b      	lsls	r3, r3, #12
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	61da      	str	r2, [r3, #28]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	0011      	movs	r1, r2
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff fe2b 	bl	8001cdc <LL_TIM_OC_SetCompareCH4>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	621a      	str	r2, [r3, #32]
 800208c:	2300      	movs	r3, #0
 800208e:	0018      	movs	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	b006      	add	sp, #24
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	ffffefff 	.word	0xffffefff
 800209c:	fffffcff 	.word	0xfffffcff
 80020a0:	ffff8fff 	.word	0xffff8fff
 80020a4:	ffffdfff 	.word	0xffffdfff

080020a8 <LL_USART_IsEnabled>:
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2201      	movs	r2, #1
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <LL_USART_IsEnabled+0x18>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <LL_USART_IsEnabled+0x1a>
 80020c0:	2300      	movs	r3, #0
 80020c2:	0018      	movs	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b002      	add	sp, #8
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <LL_USART_SetStopBitsLength>:
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <LL_USART_SetStopBitsLength+0x24>)
 80020dc:	401a      	ands	r2, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b002      	add	sp, #8
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	ffffcfff 	.word	0xffffcfff

080020f4 <LL_USART_SetHWFlowCtrl>:
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <LL_USART_SetHWFlowCtrl+0x24>)
 8002104:	401a      	ands	r2, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	46bd      	mov	sp, r7
 8002112:	b002      	add	sp, #8
 8002114:	bd80      	pop	{r7, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	fffffcff 	.word	0xfffffcff

0800211c <LL_USART_SetBaudRate>:
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	429a      	cmp	r2, r3
 8002132:	d11c      	bne.n	800216e <LL_USART_SetBaudRate+0x52>
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	005a      	lsls	r2, r3, #1
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	18d3      	adds	r3, r2, r3
 800213e:	6839      	ldr	r1, [r7, #0]
 8002140:	0018      	movs	r0, r3
 8002142:	f7fd ffe1 	bl	8000108 <__udivsi3>
 8002146:	0003      	movs	r3, r0
 8002148:	b29b      	uxth	r3, r3
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	4a10      	ldr	r2, [pc, #64]	; (8002190 <LL_USART_SetBaudRate+0x74>)
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	085b      	lsrs	r3, r3, #1
 8002158:	b29b      	uxth	r3, r3
 800215a:	001a      	movs	r2, r3
 800215c:	2307      	movs	r3, #7
 800215e:	4013      	ands	r3, r2
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	e00c      	b.n	8002188 <LL_USART_SetBaudRate+0x6c>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	085a      	lsrs	r2, r3, #1
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	18d3      	adds	r3, r2, r3
 8002176:	6839      	ldr	r1, [r7, #0]
 8002178:	0018      	movs	r0, r3
 800217a:	f7fd ffc5 	bl	8000108 <__udivsi3>
 800217e:	0003      	movs	r3, r0
 8002180:	b29b      	uxth	r3, r3
 8002182:	001a      	movs	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	60da      	str	r2, [r3, #12]
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b006      	add	sp, #24
 800218e:	bd80      	pop	{r7, pc}
 8002190:	0000fff0 	.word	0x0000fff0

08002194 <LL_USART_Init>:
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	230f      	movs	r3, #15
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7ff ff7b 	bl	80020a8 <LL_USART_IsEnabled>
 80021b2:	1e03      	subs	r3, r0, #0
 80021b4:	d13b      	bne.n	800222e <LL_USART_Init+0x9a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a20      	ldr	r2, [pc, #128]	; (800223c <LL_USART_Init+0xa8>)
 80021bc:	401a      	ands	r2, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6859      	ldr	r1, [r3, #4]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	4319      	orrs	r1, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	4319      	orrs	r1, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	430b      	orrs	r3, r1
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0011      	movs	r1, r2
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7ff ff72 	bl	80020cc <LL_USART_SetStopBitsLength>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	0011      	movs	r1, r2
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7ff ff7f 	bl	80020f4 <LL_USART_SetHWFlowCtrl>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a11      	ldr	r2, [pc, #68]	; (8002240 <LL_USART_Init+0xac>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d104      	bne.n	8002208 <LL_USART_Init+0x74>
 80021fe:	200c      	movs	r0, #12
 8002200:	f7ff fbbc 	bl	800197c <LL_RCC_GetUSARTClockFreq>
 8002204:	0003      	movs	r3, r0
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00f      	beq.n	800222e <LL_USART_Init+0x9a>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <LL_USART_Init+0x9a>
 8002216:	230f      	movs	r3, #15
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68b9      	ldr	r1, [r7, #8]
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff77 	bl	800211c <LL_USART_SetBaudRate>
 800222e:	230f      	movs	r3, #15
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	0018      	movs	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	b004      	add	sp, #16
 800223a:	bd80      	pop	{r7, pc}
 800223c:	efff69f3 	.word	0xefff69f3
 8002240:	40004400 	.word	0x40004400

08002244 <LL_InitTick>:
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	6839      	ldr	r1, [r7, #0]
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7fd ff59 	bl	8000108 <__udivsi3>
 8002256:	0003      	movs	r3, r0
 8002258:	001a      	movs	r2, r3
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <LL_InitTick+0x30>)
 800225c:	3a01      	subs	r2, #1
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <LL_InitTick+0x30>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	4b03      	ldr	r3, [pc, #12]	; (8002274 <LL_InitTick+0x30>)
 8002268:	2205      	movs	r2, #5
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	46c0      	nop			; (mov r8, r8)
 800226e:	46bd      	mov	sp, r7
 8002270:	b002      	add	sp, #8
 8002272:	bd80      	pop	{r7, pc}
 8002274:	e000e010 	.word	0xe000e010

08002278 <LL_Init1msTick>:
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	23fa      	movs	r3, #250	; 0xfa
 8002282:	009a      	lsls	r2, r3, #2
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	0011      	movs	r1, r2
 8002288:	0018      	movs	r0, r3
 800228a:	f7ff ffdb 	bl	8002244 <LL_InitTick>
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	46bd      	mov	sp, r7
 8002292:	b002      	add	sp, #8
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <LL_SetSystemCoreClock>:
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <LL_SetSystemCoreClock+0x18>)
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b002      	add	sp, #8
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	20000010 	.word	0x20000010

080022b4 <__libc_init_array>:
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	2600      	movs	r6, #0
 80022b8:	4d0c      	ldr	r5, [pc, #48]	; (80022ec <__libc_init_array+0x38>)
 80022ba:	4c0d      	ldr	r4, [pc, #52]	; (80022f0 <__libc_init_array+0x3c>)
 80022bc:	1b64      	subs	r4, r4, r5
 80022be:	10a4      	asrs	r4, r4, #2
 80022c0:	42a6      	cmp	r6, r4
 80022c2:	d109      	bne.n	80022d8 <__libc_init_array+0x24>
 80022c4:	2600      	movs	r6, #0
 80022c6:	f000 f821 	bl	800230c <_init>
 80022ca:	4d0a      	ldr	r5, [pc, #40]	; (80022f4 <__libc_init_array+0x40>)
 80022cc:	4c0a      	ldr	r4, [pc, #40]	; (80022f8 <__libc_init_array+0x44>)
 80022ce:	1b64      	subs	r4, r4, r5
 80022d0:	10a4      	asrs	r4, r4, #2
 80022d2:	42a6      	cmp	r6, r4
 80022d4:	d105      	bne.n	80022e2 <__libc_init_array+0x2e>
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
 80022d8:	00b3      	lsls	r3, r6, #2
 80022da:	58eb      	ldr	r3, [r5, r3]
 80022dc:	4798      	blx	r3
 80022de:	3601      	adds	r6, #1
 80022e0:	e7ee      	b.n	80022c0 <__libc_init_array+0xc>
 80022e2:	00b3      	lsls	r3, r6, #2
 80022e4:	58eb      	ldr	r3, [r5, r3]
 80022e6:	4798      	blx	r3
 80022e8:	3601      	adds	r6, #1
 80022ea:	e7f2      	b.n	80022d2 <__libc_init_array+0x1e>
 80022ec:	08002358 	.word	0x08002358
 80022f0:	08002358 	.word	0x08002358
 80022f4:	08002358 	.word	0x08002358
 80022f8:	0800235c 	.word	0x0800235c

080022fc <memset>:
 80022fc:	0003      	movs	r3, r0
 80022fe:	1882      	adds	r2, r0, r2
 8002300:	4293      	cmp	r3, r2
 8002302:	d100      	bne.n	8002306 <memset+0xa>
 8002304:	4770      	bx	lr
 8002306:	7019      	strb	r1, [r3, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	e7f9      	b.n	8002300 <memset+0x4>

0800230c <_init>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002312:	bc08      	pop	{r3}
 8002314:	469e      	mov	lr, r3
 8002316:	4770      	bx	lr

08002318 <_fini>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800231e:	bc08      	pop	{r3}
 8002320:	469e      	mov	lr, r3
 8002322:	4770      	bx	lr
